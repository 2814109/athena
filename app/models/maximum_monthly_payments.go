// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MaximumMonthlyPayment is an object representing the database table.
type MaximumMonthlyPayment struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UserID    int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`

	R *maximumMonthlyPaymentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L maximumMonthlyPaymentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MaximumMonthlyPaymentColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	UserID    string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	UserID:    "user_id",
}

var MaximumMonthlyPaymentTableColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	UserID    string
}{
	ID:        "maximum_monthly_payments.id",
	CreatedAt: "maximum_monthly_payments.created_at",
	UpdatedAt: "maximum_monthly_payments.updated_at",
	UserID:    "maximum_monthly_payments.user_id",
}

// Generated where

var MaximumMonthlyPaymentWhere = struct {
	ID        whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	UserID    whereHelperint
}{
	ID:        whereHelperint{field: "\"maximum_monthly_payments\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"maximum_monthly_payments\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"maximum_monthly_payments\".\"updated_at\""},
	UserID:    whereHelperint{field: "\"maximum_monthly_payments\".\"user_id\""},
}

// MaximumMonthlyPaymentRels is where relationship names are stored.
var MaximumMonthlyPaymentRels = struct {
	User string
}{
	User: "User",
}

// maximumMonthlyPaymentR is where relationships are stored.
type maximumMonthlyPaymentR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*maximumMonthlyPaymentR) NewStruct() *maximumMonthlyPaymentR {
	return &maximumMonthlyPaymentR{}
}

func (r *maximumMonthlyPaymentR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// maximumMonthlyPaymentL is where Load methods for each relationship are stored.
type maximumMonthlyPaymentL struct{}

var (
	maximumMonthlyPaymentAllColumns            = []string{"id", "created_at", "updated_at", "user_id"}
	maximumMonthlyPaymentColumnsWithoutDefault = []string{"created_at", "updated_at"}
	maximumMonthlyPaymentColumnsWithDefault    = []string{"id", "user_id"}
	maximumMonthlyPaymentPrimaryKeyColumns     = []string{"id"}
	maximumMonthlyPaymentGeneratedColumns      = []string{}
)

type (
	// MaximumMonthlyPaymentSlice is an alias for a slice of pointers to MaximumMonthlyPayment.
	// This should almost always be used instead of []MaximumMonthlyPayment.
	MaximumMonthlyPaymentSlice []*MaximumMonthlyPayment
	// MaximumMonthlyPaymentHook is the signature for custom MaximumMonthlyPayment hook methods
	MaximumMonthlyPaymentHook func(context.Context, boil.ContextExecutor, *MaximumMonthlyPayment) error

	maximumMonthlyPaymentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	maximumMonthlyPaymentType                 = reflect.TypeOf(&MaximumMonthlyPayment{})
	maximumMonthlyPaymentMapping              = queries.MakeStructMapping(maximumMonthlyPaymentType)
	maximumMonthlyPaymentPrimaryKeyMapping, _ = queries.BindMapping(maximumMonthlyPaymentType, maximumMonthlyPaymentMapping, maximumMonthlyPaymentPrimaryKeyColumns)
	maximumMonthlyPaymentInsertCacheMut       sync.RWMutex
	maximumMonthlyPaymentInsertCache          = make(map[string]insertCache)
	maximumMonthlyPaymentUpdateCacheMut       sync.RWMutex
	maximumMonthlyPaymentUpdateCache          = make(map[string]updateCache)
	maximumMonthlyPaymentUpsertCacheMut       sync.RWMutex
	maximumMonthlyPaymentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var maximumMonthlyPaymentAfterSelectHooks []MaximumMonthlyPaymentHook

var maximumMonthlyPaymentBeforeInsertHooks []MaximumMonthlyPaymentHook
var maximumMonthlyPaymentAfterInsertHooks []MaximumMonthlyPaymentHook

var maximumMonthlyPaymentBeforeUpdateHooks []MaximumMonthlyPaymentHook
var maximumMonthlyPaymentAfterUpdateHooks []MaximumMonthlyPaymentHook

var maximumMonthlyPaymentBeforeDeleteHooks []MaximumMonthlyPaymentHook
var maximumMonthlyPaymentAfterDeleteHooks []MaximumMonthlyPaymentHook

var maximumMonthlyPaymentBeforeUpsertHooks []MaximumMonthlyPaymentHook
var maximumMonthlyPaymentAfterUpsertHooks []MaximumMonthlyPaymentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MaximumMonthlyPayment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range maximumMonthlyPaymentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MaximumMonthlyPayment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range maximumMonthlyPaymentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MaximumMonthlyPayment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range maximumMonthlyPaymentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MaximumMonthlyPayment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range maximumMonthlyPaymentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MaximumMonthlyPayment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range maximumMonthlyPaymentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MaximumMonthlyPayment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range maximumMonthlyPaymentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MaximumMonthlyPayment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range maximumMonthlyPaymentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MaximumMonthlyPayment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range maximumMonthlyPaymentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MaximumMonthlyPayment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range maximumMonthlyPaymentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMaximumMonthlyPaymentHook registers your hook function for all future operations.
func AddMaximumMonthlyPaymentHook(hookPoint boil.HookPoint, maximumMonthlyPaymentHook MaximumMonthlyPaymentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		maximumMonthlyPaymentAfterSelectHooks = append(maximumMonthlyPaymentAfterSelectHooks, maximumMonthlyPaymentHook)
	case boil.BeforeInsertHook:
		maximumMonthlyPaymentBeforeInsertHooks = append(maximumMonthlyPaymentBeforeInsertHooks, maximumMonthlyPaymentHook)
	case boil.AfterInsertHook:
		maximumMonthlyPaymentAfterInsertHooks = append(maximumMonthlyPaymentAfterInsertHooks, maximumMonthlyPaymentHook)
	case boil.BeforeUpdateHook:
		maximumMonthlyPaymentBeforeUpdateHooks = append(maximumMonthlyPaymentBeforeUpdateHooks, maximumMonthlyPaymentHook)
	case boil.AfterUpdateHook:
		maximumMonthlyPaymentAfterUpdateHooks = append(maximumMonthlyPaymentAfterUpdateHooks, maximumMonthlyPaymentHook)
	case boil.BeforeDeleteHook:
		maximumMonthlyPaymentBeforeDeleteHooks = append(maximumMonthlyPaymentBeforeDeleteHooks, maximumMonthlyPaymentHook)
	case boil.AfterDeleteHook:
		maximumMonthlyPaymentAfterDeleteHooks = append(maximumMonthlyPaymentAfterDeleteHooks, maximumMonthlyPaymentHook)
	case boil.BeforeUpsertHook:
		maximumMonthlyPaymentBeforeUpsertHooks = append(maximumMonthlyPaymentBeforeUpsertHooks, maximumMonthlyPaymentHook)
	case boil.AfterUpsertHook:
		maximumMonthlyPaymentAfterUpsertHooks = append(maximumMonthlyPaymentAfterUpsertHooks, maximumMonthlyPaymentHook)
	}
}

// OneG returns a single maximumMonthlyPayment record from the query using the global executor.
func (q maximumMonthlyPaymentQuery) OneG(ctx context.Context) (*MaximumMonthlyPayment, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single maximumMonthlyPayment record from the query.
func (q maximumMonthlyPaymentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MaximumMonthlyPayment, error) {
	o := &MaximumMonthlyPayment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for maximum_monthly_payments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all MaximumMonthlyPayment records from the query using the global executor.
func (q maximumMonthlyPaymentQuery) AllG(ctx context.Context) (MaximumMonthlyPaymentSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all MaximumMonthlyPayment records from the query.
func (q maximumMonthlyPaymentQuery) All(ctx context.Context, exec boil.ContextExecutor) (MaximumMonthlyPaymentSlice, error) {
	var o []*MaximumMonthlyPayment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MaximumMonthlyPayment slice")
	}

	if len(maximumMonthlyPaymentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all MaximumMonthlyPayment records in the query using the global executor
func (q maximumMonthlyPaymentQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all MaximumMonthlyPayment records in the query.
func (q maximumMonthlyPaymentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count maximum_monthly_payments rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q maximumMonthlyPaymentQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q maximumMonthlyPaymentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if maximum_monthly_payments exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *MaximumMonthlyPayment) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (maximumMonthlyPaymentL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMaximumMonthlyPayment interface{}, mods queries.Applicator) error {
	var slice []*MaximumMonthlyPayment
	var object *MaximumMonthlyPayment

	if singular {
		var ok bool
		object, ok = maybeMaximumMonthlyPayment.(*MaximumMonthlyPayment)
		if !ok {
			object = new(MaximumMonthlyPayment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMaximumMonthlyPayment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMaximumMonthlyPayment))
			}
		}
	} else {
		s, ok := maybeMaximumMonthlyPayment.(*[]*MaximumMonthlyPayment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMaximumMonthlyPayment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMaximumMonthlyPayment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &maximumMonthlyPaymentR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &maximumMonthlyPaymentR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.MaximumMonthlyPayments = append(foreign.R.MaximumMonthlyPayments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.MaximumMonthlyPayments = append(foreign.R.MaximumMonthlyPayments, local)
				break
			}
		}
	}

	return nil
}

// SetUserG of the maximumMonthlyPayment to the related item.
// Sets o.R.User to related.
// Adds o to related.R.MaximumMonthlyPayments.
// Uses the global database handle.
func (o *MaximumMonthlyPayment) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the maximumMonthlyPayment to the related item.
// Sets o.R.User to related.
// Adds o to related.R.MaximumMonthlyPayments.
func (o *MaximumMonthlyPayment) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"maximum_monthly_payments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, maximumMonthlyPaymentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &maximumMonthlyPaymentR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			MaximumMonthlyPayments: MaximumMonthlyPaymentSlice{o},
		}
	} else {
		related.R.MaximumMonthlyPayments = append(related.R.MaximumMonthlyPayments, o)
	}

	return nil
}

// MaximumMonthlyPayments retrieves all the records using an executor.
func MaximumMonthlyPayments(mods ...qm.QueryMod) maximumMonthlyPaymentQuery {
	mods = append(mods, qm.From("\"maximum_monthly_payments\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"maximum_monthly_payments\".*"})
	}

	return maximumMonthlyPaymentQuery{q}
}

// FindMaximumMonthlyPaymentG retrieves a single record by ID.
func FindMaximumMonthlyPaymentG(ctx context.Context, iD int, selectCols ...string) (*MaximumMonthlyPayment, error) {
	return FindMaximumMonthlyPayment(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindMaximumMonthlyPayment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMaximumMonthlyPayment(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MaximumMonthlyPayment, error) {
	maximumMonthlyPaymentObj := &MaximumMonthlyPayment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"maximum_monthly_payments\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, maximumMonthlyPaymentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from maximum_monthly_payments")
	}

	if err = maximumMonthlyPaymentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return maximumMonthlyPaymentObj, err
	}

	return maximumMonthlyPaymentObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MaximumMonthlyPayment) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MaximumMonthlyPayment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no maximum_monthly_payments provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(maximumMonthlyPaymentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	maximumMonthlyPaymentInsertCacheMut.RLock()
	cache, cached := maximumMonthlyPaymentInsertCache[key]
	maximumMonthlyPaymentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			maximumMonthlyPaymentAllColumns,
			maximumMonthlyPaymentColumnsWithDefault,
			maximumMonthlyPaymentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(maximumMonthlyPaymentType, maximumMonthlyPaymentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(maximumMonthlyPaymentType, maximumMonthlyPaymentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"maximum_monthly_payments\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"maximum_monthly_payments\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into maximum_monthly_payments")
	}

	if !cached {
		maximumMonthlyPaymentInsertCacheMut.Lock()
		maximumMonthlyPaymentInsertCache[key] = cache
		maximumMonthlyPaymentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single MaximumMonthlyPayment record using the global executor.
// See Update for more documentation.
func (o *MaximumMonthlyPayment) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the MaximumMonthlyPayment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MaximumMonthlyPayment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	maximumMonthlyPaymentUpdateCacheMut.RLock()
	cache, cached := maximumMonthlyPaymentUpdateCache[key]
	maximumMonthlyPaymentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			maximumMonthlyPaymentAllColumns,
			maximumMonthlyPaymentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update maximum_monthly_payments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"maximum_monthly_payments\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, maximumMonthlyPaymentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(maximumMonthlyPaymentType, maximumMonthlyPaymentMapping, append(wl, maximumMonthlyPaymentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update maximum_monthly_payments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for maximum_monthly_payments")
	}

	if !cached {
		maximumMonthlyPaymentUpdateCacheMut.Lock()
		maximumMonthlyPaymentUpdateCache[key] = cache
		maximumMonthlyPaymentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q maximumMonthlyPaymentQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q maximumMonthlyPaymentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for maximum_monthly_payments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for maximum_monthly_payments")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MaximumMonthlyPaymentSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MaximumMonthlyPaymentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), maximumMonthlyPaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"maximum_monthly_payments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, maximumMonthlyPaymentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in maximumMonthlyPayment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all maximumMonthlyPayment")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *MaximumMonthlyPayment) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MaximumMonthlyPayment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no maximum_monthly_payments provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(maximumMonthlyPaymentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	maximumMonthlyPaymentUpsertCacheMut.RLock()
	cache, cached := maximumMonthlyPaymentUpsertCache[key]
	maximumMonthlyPaymentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			maximumMonthlyPaymentAllColumns,
			maximumMonthlyPaymentColumnsWithDefault,
			maximumMonthlyPaymentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			maximumMonthlyPaymentAllColumns,
			maximumMonthlyPaymentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert maximum_monthly_payments, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(maximumMonthlyPaymentPrimaryKeyColumns))
			copy(conflict, maximumMonthlyPaymentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"maximum_monthly_payments\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(maximumMonthlyPaymentType, maximumMonthlyPaymentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(maximumMonthlyPaymentType, maximumMonthlyPaymentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert maximum_monthly_payments")
	}

	if !cached {
		maximumMonthlyPaymentUpsertCacheMut.Lock()
		maximumMonthlyPaymentUpsertCache[key] = cache
		maximumMonthlyPaymentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single MaximumMonthlyPayment record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *MaximumMonthlyPayment) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single MaximumMonthlyPayment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MaximumMonthlyPayment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MaximumMonthlyPayment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), maximumMonthlyPaymentPrimaryKeyMapping)
	sql := "DELETE FROM \"maximum_monthly_payments\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from maximum_monthly_payments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for maximum_monthly_payments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q maximumMonthlyPaymentQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q maximumMonthlyPaymentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no maximumMonthlyPaymentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from maximum_monthly_payments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for maximum_monthly_payments")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MaximumMonthlyPaymentSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MaximumMonthlyPaymentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(maximumMonthlyPaymentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), maximumMonthlyPaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"maximum_monthly_payments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, maximumMonthlyPaymentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from maximumMonthlyPayment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for maximum_monthly_payments")
	}

	if len(maximumMonthlyPaymentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *MaximumMonthlyPayment) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no MaximumMonthlyPayment provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MaximumMonthlyPayment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMaximumMonthlyPayment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MaximumMonthlyPaymentSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty MaximumMonthlyPaymentSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MaximumMonthlyPaymentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MaximumMonthlyPaymentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), maximumMonthlyPaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"maximum_monthly_payments\".* FROM \"maximum_monthly_payments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, maximumMonthlyPaymentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MaximumMonthlyPaymentSlice")
	}

	*o = slice

	return nil
}

// MaximumMonthlyPaymentExistsG checks if the MaximumMonthlyPayment row exists.
func MaximumMonthlyPaymentExistsG(ctx context.Context, iD int) (bool, error) {
	return MaximumMonthlyPaymentExists(ctx, boil.GetContextDB(), iD)
}

// MaximumMonthlyPaymentExists checks if the MaximumMonthlyPayment row exists.
func MaximumMonthlyPaymentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"maximum_monthly_payments\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if maximum_monthly_payments exists")
	}

	return exists, nil
}

// Exists checks if the MaximumMonthlyPayment row exists.
func (o *MaximumMonthlyPayment) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MaximumMonthlyPaymentExists(ctx, exec, o.ID)
}
