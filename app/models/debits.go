// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Debit is an object representing the database table.
type Debit struct {
	ID          int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	EntryID     null.Int      `boil:"entry_id" json:"entry_id,omitempty" toml:"entry_id" yaml:"entry_id,omitempty"`
	AccountName string        `boil:"account_name" json:"account_name" toml:"account_name" yaml:"account_name"`
	Amount      types.Decimal `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`

	R *debitR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L debitL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DebitColumns = struct {
	ID          string
	EntryID     string
	AccountName string
	Amount      string
}{
	ID:          "id",
	EntryID:     "entry_id",
	AccountName: "account_name",
	Amount:      "amount",
}

var DebitTableColumns = struct {
	ID          string
	EntryID     string
	AccountName string
	Amount      string
}{
	ID:          "debits.id",
	EntryID:     "debits.entry_id",
	AccountName: "debits.account_name",
	Amount:      "debits.amount",
}

// Generated where

var DebitWhere = struct {
	ID          whereHelperint
	EntryID     whereHelpernull_Int
	AccountName whereHelperstring
	Amount      whereHelpertypes_Decimal
}{
	ID:          whereHelperint{field: "\"debits\".\"id\""},
	EntryID:     whereHelpernull_Int{field: "\"debits\".\"entry_id\""},
	AccountName: whereHelperstring{field: "\"debits\".\"account_name\""},
	Amount:      whereHelpertypes_Decimal{field: "\"debits\".\"amount\""},
}

// DebitRels is where relationship names are stored.
var DebitRels = struct {
	Entry string
}{
	Entry: "Entry",
}

// debitR is where relationships are stored.
type debitR struct {
	Entry *Entry `boil:"Entry" json:"Entry" toml:"Entry" yaml:"Entry"`
}

// NewStruct creates a new relationship struct
func (*debitR) NewStruct() *debitR {
	return &debitR{}
}

func (r *debitR) GetEntry() *Entry {
	if r == nil {
		return nil
	}
	return r.Entry
}

// debitL is where Load methods for each relationship are stored.
type debitL struct{}

var (
	debitAllColumns            = []string{"id", "entry_id", "account_name", "amount"}
	debitColumnsWithoutDefault = []string{"account_name", "amount"}
	debitColumnsWithDefault    = []string{"id", "entry_id"}
	debitPrimaryKeyColumns     = []string{"id"}
	debitGeneratedColumns      = []string{}
)

type (
	// DebitSlice is an alias for a slice of pointers to Debit.
	// This should almost always be used instead of []Debit.
	DebitSlice []*Debit
	// DebitHook is the signature for custom Debit hook methods
	DebitHook func(context.Context, boil.ContextExecutor, *Debit) error

	debitQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	debitType                 = reflect.TypeOf(&Debit{})
	debitMapping              = queries.MakeStructMapping(debitType)
	debitPrimaryKeyMapping, _ = queries.BindMapping(debitType, debitMapping, debitPrimaryKeyColumns)
	debitInsertCacheMut       sync.RWMutex
	debitInsertCache          = make(map[string]insertCache)
	debitUpdateCacheMut       sync.RWMutex
	debitUpdateCache          = make(map[string]updateCache)
	debitUpsertCacheMut       sync.RWMutex
	debitUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var debitAfterSelectHooks []DebitHook

var debitBeforeInsertHooks []DebitHook
var debitAfterInsertHooks []DebitHook

var debitBeforeUpdateHooks []DebitHook
var debitAfterUpdateHooks []DebitHook

var debitBeforeDeleteHooks []DebitHook
var debitAfterDeleteHooks []DebitHook

var debitBeforeUpsertHooks []DebitHook
var debitAfterUpsertHooks []DebitHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Debit) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Debit) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Debit) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Debit) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Debit) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Debit) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Debit) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Debit) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Debit) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range debitAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDebitHook registers your hook function for all future operations.
func AddDebitHook(hookPoint boil.HookPoint, debitHook DebitHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		debitAfterSelectHooks = append(debitAfterSelectHooks, debitHook)
	case boil.BeforeInsertHook:
		debitBeforeInsertHooks = append(debitBeforeInsertHooks, debitHook)
	case boil.AfterInsertHook:
		debitAfterInsertHooks = append(debitAfterInsertHooks, debitHook)
	case boil.BeforeUpdateHook:
		debitBeforeUpdateHooks = append(debitBeforeUpdateHooks, debitHook)
	case boil.AfterUpdateHook:
		debitAfterUpdateHooks = append(debitAfterUpdateHooks, debitHook)
	case boil.BeforeDeleteHook:
		debitBeforeDeleteHooks = append(debitBeforeDeleteHooks, debitHook)
	case boil.AfterDeleteHook:
		debitAfterDeleteHooks = append(debitAfterDeleteHooks, debitHook)
	case boil.BeforeUpsertHook:
		debitBeforeUpsertHooks = append(debitBeforeUpsertHooks, debitHook)
	case boil.AfterUpsertHook:
		debitAfterUpsertHooks = append(debitAfterUpsertHooks, debitHook)
	}
}

// OneG returns a single debit record from the query using the global executor.
func (q debitQuery) OneG(ctx context.Context) (*Debit, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single debit record from the query.
func (q debitQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Debit, error) {
	o := &Debit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for debits")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Debit records from the query using the global executor.
func (q debitQuery) AllG(ctx context.Context) (DebitSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Debit records from the query.
func (q debitQuery) All(ctx context.Context, exec boil.ContextExecutor) (DebitSlice, error) {
	var o []*Debit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Debit slice")
	}

	if len(debitAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Debit records in the query using the global executor
func (q debitQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Debit records in the query.
func (q debitQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count debits rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q debitQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q debitQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if debits exists")
	}

	return count > 0, nil
}

// Entry pointed to by the foreign key.
func (o *Debit) Entry(mods ...qm.QueryMod) entryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EntryID),
	}

	queryMods = append(queryMods, mods...)

	return Entries(queryMods...)
}

// LoadEntry allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (debitL) LoadEntry(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDebit interface{}, mods queries.Applicator) error {
	var slice []*Debit
	var object *Debit

	if singular {
		var ok bool
		object, ok = maybeDebit.(*Debit)
		if !ok {
			object = new(Debit)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDebit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDebit))
			}
		}
	} else {
		s, ok := maybeDebit.(*[]*Debit)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDebit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDebit))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &debitR{}
		}
		if !queries.IsNil(object.EntryID) {
			args = append(args, object.EntryID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &debitR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.EntryID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.EntryID) {
				args = append(args, obj.EntryID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`entries`),
		qm.WhereIn(`entries.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Entry")
	}

	var resultSlice []*Entry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Entry")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for entries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for entries")
	}

	if len(entryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Entry = foreign
		if foreign.R == nil {
			foreign.R = &entryR{}
		}
		foreign.R.Debits = append(foreign.R.Debits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.EntryID, foreign.ID) {
				local.R.Entry = foreign
				if foreign.R == nil {
					foreign.R = &entryR{}
				}
				foreign.R.Debits = append(foreign.R.Debits, local)
				break
			}
		}
	}

	return nil
}

// SetEntryG of the debit to the related item.
// Sets o.R.Entry to related.
// Adds o to related.R.Debits.
// Uses the global database handle.
func (o *Debit) SetEntryG(ctx context.Context, insert bool, related *Entry) error {
	return o.SetEntry(ctx, boil.GetContextDB(), insert, related)
}

// SetEntry of the debit to the related item.
// Sets o.R.Entry to related.
// Adds o to related.R.Debits.
func (o *Debit) SetEntry(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Entry) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"debits\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"entry_id"}),
		strmangle.WhereClause("\"", "\"", 2, debitPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.EntryID, related.ID)
	if o.R == nil {
		o.R = &debitR{
			Entry: related,
		}
	} else {
		o.R.Entry = related
	}

	if related.R == nil {
		related.R = &entryR{
			Debits: DebitSlice{o},
		}
	} else {
		related.R.Debits = append(related.R.Debits, o)
	}

	return nil
}

// RemoveEntryG relationship.
// Sets o.R.Entry to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Debit) RemoveEntryG(ctx context.Context, related *Entry) error {
	return o.RemoveEntry(ctx, boil.GetContextDB(), related)
}

// RemoveEntry relationship.
// Sets o.R.Entry to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Debit) RemoveEntry(ctx context.Context, exec boil.ContextExecutor, related *Entry) error {
	var err error

	queries.SetScanner(&o.EntryID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("entry_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Entry = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Debits {
		if queries.Equal(o.EntryID, ri.EntryID) {
			continue
		}

		ln := len(related.R.Debits)
		if ln > 1 && i < ln-1 {
			related.R.Debits[i] = related.R.Debits[ln-1]
		}
		related.R.Debits = related.R.Debits[:ln-1]
		break
	}
	return nil
}

// Debits retrieves all the records using an executor.
func Debits(mods ...qm.QueryMod) debitQuery {
	mods = append(mods, qm.From("\"debits\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"debits\".*"})
	}

	return debitQuery{q}
}

// FindDebitG retrieves a single record by ID.
func FindDebitG(ctx context.Context, iD int, selectCols ...string) (*Debit, error) {
	return FindDebit(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindDebit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDebit(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Debit, error) {
	debitObj := &Debit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"debits\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, debitObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from debits")
	}

	if err = debitObj.doAfterSelectHooks(ctx, exec); err != nil {
		return debitObj, err
	}

	return debitObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Debit) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Debit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no debits provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(debitColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	debitInsertCacheMut.RLock()
	cache, cached := debitInsertCache[key]
	debitInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			debitAllColumns,
			debitColumnsWithDefault,
			debitColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(debitType, debitMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(debitType, debitMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"debits\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"debits\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into debits")
	}

	if !cached {
		debitInsertCacheMut.Lock()
		debitInsertCache[key] = cache
		debitInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Debit record using the global executor.
// See Update for more documentation.
func (o *Debit) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Debit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Debit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	debitUpdateCacheMut.RLock()
	cache, cached := debitUpdateCache[key]
	debitUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			debitAllColumns,
			debitPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update debits, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"debits\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, debitPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(debitType, debitMapping, append(wl, debitPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update debits row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for debits")
	}

	if !cached {
		debitUpdateCacheMut.Lock()
		debitUpdateCache[key] = cache
		debitUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q debitQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q debitQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for debits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for debits")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o DebitSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DebitSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), debitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"debits\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, debitPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in debit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all debit")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Debit) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Debit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no debits provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(debitColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	debitUpsertCacheMut.RLock()
	cache, cached := debitUpsertCache[key]
	debitUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			debitAllColumns,
			debitColumnsWithDefault,
			debitColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			debitAllColumns,
			debitPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert debits, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(debitPrimaryKeyColumns))
			copy(conflict, debitPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"debits\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(debitType, debitMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(debitType, debitMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert debits")
	}

	if !cached {
		debitUpsertCacheMut.Lock()
		debitUpsertCache[key] = cache
		debitUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Debit record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Debit) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Debit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Debit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Debit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), debitPrimaryKeyMapping)
	sql := "DELETE FROM \"debits\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from debits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for debits")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q debitQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q debitQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no debitQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from debits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for debits")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o DebitSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DebitSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(debitBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), debitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"debits\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, debitPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from debit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for debits")
	}

	if len(debitAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Debit) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Debit provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Debit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDebit(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DebitSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty DebitSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DebitSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DebitSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), debitPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"debits\".* FROM \"debits\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, debitPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DebitSlice")
	}

	*o = slice

	return nil
}

// DebitExistsG checks if the Debit row exists.
func DebitExistsG(ctx context.Context, iD int) (bool, error) {
	return DebitExists(ctx, boil.GetContextDB(), iD)
}

// DebitExists checks if the Debit row exists.
func DebitExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"debits\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if debits exists")
	}

	return exists, nil
}

// Exists checks if the Debit row exists.
func (o *Debit) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DebitExists(ctx, exec, o.ID)
}
