// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// MonthlyPaymentItemSnapshot is an object representing the database table.
type MonthlyPaymentItemSnapshot struct {
	ID               int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	MonthlyAmount    types.NullDecimal `boil:"monthly_amount" json:"monthly_amount,omitempty" toml:"monthly_amount" yaml:"monthly_amount,omitempty"`
	Month            time.Time         `boil:"month" json:"month" toml:"month" yaml:"month"`
	CreatedAt        time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	MonthlyPaymentID int               `boil:"monthly_payment_id" json:"monthly_payment_id" toml:"monthly_payment_id" yaml:"monthly_payment_id"`
	UserID           int               `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`

	R *monthlyPaymentItemSnapshotR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L monthlyPaymentItemSnapshotL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MonthlyPaymentItemSnapshotColumns = struct {
	ID               string
	MonthlyAmount    string
	Month            string
	CreatedAt        string
	MonthlyPaymentID string
	UserID           string
}{
	ID:               "id",
	MonthlyAmount:    "monthly_amount",
	Month:            "month",
	CreatedAt:        "created_at",
	MonthlyPaymentID: "monthly_payment_id",
	UserID:           "user_id",
}

var MonthlyPaymentItemSnapshotTableColumns = struct {
	ID               string
	MonthlyAmount    string
	Month            string
	CreatedAt        string
	MonthlyPaymentID string
	UserID           string
}{
	ID:               "monthly_payment_item_snapshots.id",
	MonthlyAmount:    "monthly_payment_item_snapshots.monthly_amount",
	Month:            "monthly_payment_item_snapshots.month",
	CreatedAt:        "monthly_payment_item_snapshots.created_at",
	MonthlyPaymentID: "monthly_payment_item_snapshots.monthly_payment_id",
	UserID:           "monthly_payment_item_snapshots.user_id",
}

// Generated where

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var MonthlyPaymentItemSnapshotWhere = struct {
	ID               whereHelperint
	MonthlyAmount    whereHelpertypes_NullDecimal
	Month            whereHelpertime_Time
	CreatedAt        whereHelpertime_Time
	MonthlyPaymentID whereHelperint
	UserID           whereHelperint
}{
	ID:               whereHelperint{field: "\"monthly_payment_item_snapshots\".\"id\""},
	MonthlyAmount:    whereHelpertypes_NullDecimal{field: "\"monthly_payment_item_snapshots\".\"monthly_amount\""},
	Month:            whereHelpertime_Time{field: "\"monthly_payment_item_snapshots\".\"month\""},
	CreatedAt:        whereHelpertime_Time{field: "\"monthly_payment_item_snapshots\".\"created_at\""},
	MonthlyPaymentID: whereHelperint{field: "\"monthly_payment_item_snapshots\".\"monthly_payment_id\""},
	UserID:           whereHelperint{field: "\"monthly_payment_item_snapshots\".\"user_id\""},
}

// MonthlyPaymentItemSnapshotRels is where relationship names are stored.
var MonthlyPaymentItemSnapshotRels = struct {
	User           string
	MonthlyPayment string
}{
	User:           "User",
	MonthlyPayment: "MonthlyPayment",
}

// monthlyPaymentItemSnapshotR is where relationships are stored.
type monthlyPaymentItemSnapshotR struct {
	User           *User                   `boil:"User" json:"User" toml:"User" yaml:"User"`
	MonthlyPayment *MonthlyPaymentSnapshot `boil:"MonthlyPayment" json:"MonthlyPayment" toml:"MonthlyPayment" yaml:"MonthlyPayment"`
}

// NewStruct creates a new relationship struct
func (*monthlyPaymentItemSnapshotR) NewStruct() *monthlyPaymentItemSnapshotR {
	return &monthlyPaymentItemSnapshotR{}
}

func (r *monthlyPaymentItemSnapshotR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *monthlyPaymentItemSnapshotR) GetMonthlyPayment() *MonthlyPaymentSnapshot {
	if r == nil {
		return nil
	}
	return r.MonthlyPayment
}

// monthlyPaymentItemSnapshotL is where Load methods for each relationship are stored.
type monthlyPaymentItemSnapshotL struct{}

var (
	monthlyPaymentItemSnapshotAllColumns            = []string{"id", "monthly_amount", "month", "created_at", "monthly_payment_id", "user_id"}
	monthlyPaymentItemSnapshotColumnsWithoutDefault = []string{"month", "created_at"}
	monthlyPaymentItemSnapshotColumnsWithDefault    = []string{"id", "monthly_amount", "monthly_payment_id", "user_id"}
	monthlyPaymentItemSnapshotPrimaryKeyColumns     = []string{"id"}
	monthlyPaymentItemSnapshotGeneratedColumns      = []string{}
)

type (
	// MonthlyPaymentItemSnapshotSlice is an alias for a slice of pointers to MonthlyPaymentItemSnapshot.
	// This should almost always be used instead of []MonthlyPaymentItemSnapshot.
	MonthlyPaymentItemSnapshotSlice []*MonthlyPaymentItemSnapshot
	// MonthlyPaymentItemSnapshotHook is the signature for custom MonthlyPaymentItemSnapshot hook methods
	MonthlyPaymentItemSnapshotHook func(context.Context, boil.ContextExecutor, *MonthlyPaymentItemSnapshot) error

	monthlyPaymentItemSnapshotQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	monthlyPaymentItemSnapshotType                 = reflect.TypeOf(&MonthlyPaymentItemSnapshot{})
	monthlyPaymentItemSnapshotMapping              = queries.MakeStructMapping(monthlyPaymentItemSnapshotType)
	monthlyPaymentItemSnapshotPrimaryKeyMapping, _ = queries.BindMapping(monthlyPaymentItemSnapshotType, monthlyPaymentItemSnapshotMapping, monthlyPaymentItemSnapshotPrimaryKeyColumns)
	monthlyPaymentItemSnapshotInsertCacheMut       sync.RWMutex
	monthlyPaymentItemSnapshotInsertCache          = make(map[string]insertCache)
	monthlyPaymentItemSnapshotUpdateCacheMut       sync.RWMutex
	monthlyPaymentItemSnapshotUpdateCache          = make(map[string]updateCache)
	monthlyPaymentItemSnapshotUpsertCacheMut       sync.RWMutex
	monthlyPaymentItemSnapshotUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var monthlyPaymentItemSnapshotAfterSelectHooks []MonthlyPaymentItemSnapshotHook

var monthlyPaymentItemSnapshotBeforeInsertHooks []MonthlyPaymentItemSnapshotHook
var monthlyPaymentItemSnapshotAfterInsertHooks []MonthlyPaymentItemSnapshotHook

var monthlyPaymentItemSnapshotBeforeUpdateHooks []MonthlyPaymentItemSnapshotHook
var monthlyPaymentItemSnapshotAfterUpdateHooks []MonthlyPaymentItemSnapshotHook

var monthlyPaymentItemSnapshotBeforeDeleteHooks []MonthlyPaymentItemSnapshotHook
var monthlyPaymentItemSnapshotAfterDeleteHooks []MonthlyPaymentItemSnapshotHook

var monthlyPaymentItemSnapshotBeforeUpsertHooks []MonthlyPaymentItemSnapshotHook
var monthlyPaymentItemSnapshotAfterUpsertHooks []MonthlyPaymentItemSnapshotHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MonthlyPaymentItemSnapshot) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyPaymentItemSnapshotAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MonthlyPaymentItemSnapshot) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyPaymentItemSnapshotBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MonthlyPaymentItemSnapshot) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyPaymentItemSnapshotAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MonthlyPaymentItemSnapshot) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyPaymentItemSnapshotBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MonthlyPaymentItemSnapshot) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyPaymentItemSnapshotAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MonthlyPaymentItemSnapshot) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyPaymentItemSnapshotBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MonthlyPaymentItemSnapshot) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyPaymentItemSnapshotAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MonthlyPaymentItemSnapshot) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyPaymentItemSnapshotBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MonthlyPaymentItemSnapshot) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyPaymentItemSnapshotAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMonthlyPaymentItemSnapshotHook registers your hook function for all future operations.
func AddMonthlyPaymentItemSnapshotHook(hookPoint boil.HookPoint, monthlyPaymentItemSnapshotHook MonthlyPaymentItemSnapshotHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		monthlyPaymentItemSnapshotAfterSelectHooks = append(monthlyPaymentItemSnapshotAfterSelectHooks, monthlyPaymentItemSnapshotHook)
	case boil.BeforeInsertHook:
		monthlyPaymentItemSnapshotBeforeInsertHooks = append(monthlyPaymentItemSnapshotBeforeInsertHooks, monthlyPaymentItemSnapshotHook)
	case boil.AfterInsertHook:
		monthlyPaymentItemSnapshotAfterInsertHooks = append(monthlyPaymentItemSnapshotAfterInsertHooks, monthlyPaymentItemSnapshotHook)
	case boil.BeforeUpdateHook:
		monthlyPaymentItemSnapshotBeforeUpdateHooks = append(monthlyPaymentItemSnapshotBeforeUpdateHooks, monthlyPaymentItemSnapshotHook)
	case boil.AfterUpdateHook:
		monthlyPaymentItemSnapshotAfterUpdateHooks = append(monthlyPaymentItemSnapshotAfterUpdateHooks, monthlyPaymentItemSnapshotHook)
	case boil.BeforeDeleteHook:
		monthlyPaymentItemSnapshotBeforeDeleteHooks = append(monthlyPaymentItemSnapshotBeforeDeleteHooks, monthlyPaymentItemSnapshotHook)
	case boil.AfterDeleteHook:
		monthlyPaymentItemSnapshotAfterDeleteHooks = append(monthlyPaymentItemSnapshotAfterDeleteHooks, monthlyPaymentItemSnapshotHook)
	case boil.BeforeUpsertHook:
		monthlyPaymentItemSnapshotBeforeUpsertHooks = append(monthlyPaymentItemSnapshotBeforeUpsertHooks, monthlyPaymentItemSnapshotHook)
	case boil.AfterUpsertHook:
		monthlyPaymentItemSnapshotAfterUpsertHooks = append(monthlyPaymentItemSnapshotAfterUpsertHooks, monthlyPaymentItemSnapshotHook)
	}
}

// OneG returns a single monthlyPaymentItemSnapshot record from the query using the global executor.
func (q monthlyPaymentItemSnapshotQuery) OneG(ctx context.Context) (*MonthlyPaymentItemSnapshot, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single monthlyPaymentItemSnapshot record from the query.
func (q monthlyPaymentItemSnapshotQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MonthlyPaymentItemSnapshot, error) {
	o := &MonthlyPaymentItemSnapshot{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for monthly_payment_item_snapshots")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all MonthlyPaymentItemSnapshot records from the query using the global executor.
func (q monthlyPaymentItemSnapshotQuery) AllG(ctx context.Context) (MonthlyPaymentItemSnapshotSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all MonthlyPaymentItemSnapshot records from the query.
func (q monthlyPaymentItemSnapshotQuery) All(ctx context.Context, exec boil.ContextExecutor) (MonthlyPaymentItemSnapshotSlice, error) {
	var o []*MonthlyPaymentItemSnapshot

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MonthlyPaymentItemSnapshot slice")
	}

	if len(monthlyPaymentItemSnapshotAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all MonthlyPaymentItemSnapshot records in the query using the global executor
func (q monthlyPaymentItemSnapshotQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all MonthlyPaymentItemSnapshot records in the query.
func (q monthlyPaymentItemSnapshotQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count monthly_payment_item_snapshots rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q monthlyPaymentItemSnapshotQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q monthlyPaymentItemSnapshotQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if monthly_payment_item_snapshots exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *MonthlyPaymentItemSnapshot) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// MonthlyPayment pointed to by the foreign key.
func (o *MonthlyPaymentItemSnapshot) MonthlyPayment(mods ...qm.QueryMod) monthlyPaymentSnapshotQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MonthlyPaymentID),
	}

	queryMods = append(queryMods, mods...)

	return MonthlyPaymentSnapshots(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (monthlyPaymentItemSnapshotL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMonthlyPaymentItemSnapshot interface{}, mods queries.Applicator) error {
	var slice []*MonthlyPaymentItemSnapshot
	var object *MonthlyPaymentItemSnapshot

	if singular {
		var ok bool
		object, ok = maybeMonthlyPaymentItemSnapshot.(*MonthlyPaymentItemSnapshot)
		if !ok {
			object = new(MonthlyPaymentItemSnapshot)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMonthlyPaymentItemSnapshot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMonthlyPaymentItemSnapshot))
			}
		}
	} else {
		s, ok := maybeMonthlyPaymentItemSnapshot.(*[]*MonthlyPaymentItemSnapshot)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMonthlyPaymentItemSnapshot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMonthlyPaymentItemSnapshot))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &monthlyPaymentItemSnapshotR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &monthlyPaymentItemSnapshotR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.MonthlyPaymentItemSnapshots = append(foreign.R.MonthlyPaymentItemSnapshots, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.MonthlyPaymentItemSnapshots = append(foreign.R.MonthlyPaymentItemSnapshots, local)
				break
			}
		}
	}

	return nil
}

// LoadMonthlyPayment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (monthlyPaymentItemSnapshotL) LoadMonthlyPayment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMonthlyPaymentItemSnapshot interface{}, mods queries.Applicator) error {
	var slice []*MonthlyPaymentItemSnapshot
	var object *MonthlyPaymentItemSnapshot

	if singular {
		var ok bool
		object, ok = maybeMonthlyPaymentItemSnapshot.(*MonthlyPaymentItemSnapshot)
		if !ok {
			object = new(MonthlyPaymentItemSnapshot)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMonthlyPaymentItemSnapshot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMonthlyPaymentItemSnapshot))
			}
		}
	} else {
		s, ok := maybeMonthlyPaymentItemSnapshot.(*[]*MonthlyPaymentItemSnapshot)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMonthlyPaymentItemSnapshot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMonthlyPaymentItemSnapshot))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &monthlyPaymentItemSnapshotR{}
		}
		args = append(args, object.MonthlyPaymentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &monthlyPaymentItemSnapshotR{}
			}

			for _, a := range args {
				if a == obj.MonthlyPaymentID {
					continue Outer
				}
			}

			args = append(args, obj.MonthlyPaymentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`monthly_payment_snapshots`),
		qm.WhereIn(`monthly_payment_snapshots.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MonthlyPaymentSnapshot")
	}

	var resultSlice []*MonthlyPaymentSnapshot
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MonthlyPaymentSnapshot")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for monthly_payment_snapshots")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for monthly_payment_snapshots")
	}

	if len(monthlyPaymentSnapshotAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MonthlyPayment = foreign
		if foreign.R == nil {
			foreign.R = &monthlyPaymentSnapshotR{}
		}
		foreign.R.MonthlyPaymentMonthlyPaymentItemSnapshots = append(foreign.R.MonthlyPaymentMonthlyPaymentItemSnapshots, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MonthlyPaymentID == foreign.ID {
				local.R.MonthlyPayment = foreign
				if foreign.R == nil {
					foreign.R = &monthlyPaymentSnapshotR{}
				}
				foreign.R.MonthlyPaymentMonthlyPaymentItemSnapshots = append(foreign.R.MonthlyPaymentMonthlyPaymentItemSnapshots, local)
				break
			}
		}
	}

	return nil
}

// SetUserG of the monthlyPaymentItemSnapshot to the related item.
// Sets o.R.User to related.
// Adds o to related.R.MonthlyPaymentItemSnapshots.
// Uses the global database handle.
func (o *MonthlyPaymentItemSnapshot) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the monthlyPaymentItemSnapshot to the related item.
// Sets o.R.User to related.
// Adds o to related.R.MonthlyPaymentItemSnapshots.
func (o *MonthlyPaymentItemSnapshot) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"monthly_payment_item_snapshots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, monthlyPaymentItemSnapshotPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &monthlyPaymentItemSnapshotR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			MonthlyPaymentItemSnapshots: MonthlyPaymentItemSnapshotSlice{o},
		}
	} else {
		related.R.MonthlyPaymentItemSnapshots = append(related.R.MonthlyPaymentItemSnapshots, o)
	}

	return nil
}

// SetMonthlyPaymentG of the monthlyPaymentItemSnapshot to the related item.
// Sets o.R.MonthlyPayment to related.
// Adds o to related.R.MonthlyPaymentMonthlyPaymentItemSnapshots.
// Uses the global database handle.
func (o *MonthlyPaymentItemSnapshot) SetMonthlyPaymentG(ctx context.Context, insert bool, related *MonthlyPaymentSnapshot) error {
	return o.SetMonthlyPayment(ctx, boil.GetContextDB(), insert, related)
}

// SetMonthlyPayment of the monthlyPaymentItemSnapshot to the related item.
// Sets o.R.MonthlyPayment to related.
// Adds o to related.R.MonthlyPaymentMonthlyPaymentItemSnapshots.
func (o *MonthlyPaymentItemSnapshot) SetMonthlyPayment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MonthlyPaymentSnapshot) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"monthly_payment_item_snapshots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"monthly_payment_id"}),
		strmangle.WhereClause("\"", "\"", 2, monthlyPaymentItemSnapshotPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MonthlyPaymentID = related.ID
	if o.R == nil {
		o.R = &monthlyPaymentItemSnapshotR{
			MonthlyPayment: related,
		}
	} else {
		o.R.MonthlyPayment = related
	}

	if related.R == nil {
		related.R = &monthlyPaymentSnapshotR{
			MonthlyPaymentMonthlyPaymentItemSnapshots: MonthlyPaymentItemSnapshotSlice{o},
		}
	} else {
		related.R.MonthlyPaymentMonthlyPaymentItemSnapshots = append(related.R.MonthlyPaymentMonthlyPaymentItemSnapshots, o)
	}

	return nil
}

// MonthlyPaymentItemSnapshots retrieves all the records using an executor.
func MonthlyPaymentItemSnapshots(mods ...qm.QueryMod) monthlyPaymentItemSnapshotQuery {
	mods = append(mods, qm.From("\"monthly_payment_item_snapshots\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"monthly_payment_item_snapshots\".*"})
	}

	return monthlyPaymentItemSnapshotQuery{q}
}

// FindMonthlyPaymentItemSnapshotG retrieves a single record by ID.
func FindMonthlyPaymentItemSnapshotG(ctx context.Context, iD int, selectCols ...string) (*MonthlyPaymentItemSnapshot, error) {
	return FindMonthlyPaymentItemSnapshot(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindMonthlyPaymentItemSnapshot retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMonthlyPaymentItemSnapshot(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MonthlyPaymentItemSnapshot, error) {
	monthlyPaymentItemSnapshotObj := &MonthlyPaymentItemSnapshot{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"monthly_payment_item_snapshots\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, monthlyPaymentItemSnapshotObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from monthly_payment_item_snapshots")
	}

	if err = monthlyPaymentItemSnapshotObj.doAfterSelectHooks(ctx, exec); err != nil {
		return monthlyPaymentItemSnapshotObj, err
	}

	return monthlyPaymentItemSnapshotObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MonthlyPaymentItemSnapshot) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MonthlyPaymentItemSnapshot) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no monthly_payment_item_snapshots provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(monthlyPaymentItemSnapshotColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	monthlyPaymentItemSnapshotInsertCacheMut.RLock()
	cache, cached := monthlyPaymentItemSnapshotInsertCache[key]
	monthlyPaymentItemSnapshotInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			monthlyPaymentItemSnapshotAllColumns,
			monthlyPaymentItemSnapshotColumnsWithDefault,
			monthlyPaymentItemSnapshotColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(monthlyPaymentItemSnapshotType, monthlyPaymentItemSnapshotMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(monthlyPaymentItemSnapshotType, monthlyPaymentItemSnapshotMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"monthly_payment_item_snapshots\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"monthly_payment_item_snapshots\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into monthly_payment_item_snapshots")
	}

	if !cached {
		monthlyPaymentItemSnapshotInsertCacheMut.Lock()
		monthlyPaymentItemSnapshotInsertCache[key] = cache
		monthlyPaymentItemSnapshotInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single MonthlyPaymentItemSnapshot record using the global executor.
// See Update for more documentation.
func (o *MonthlyPaymentItemSnapshot) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the MonthlyPaymentItemSnapshot.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MonthlyPaymentItemSnapshot) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	monthlyPaymentItemSnapshotUpdateCacheMut.RLock()
	cache, cached := monthlyPaymentItemSnapshotUpdateCache[key]
	monthlyPaymentItemSnapshotUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			monthlyPaymentItemSnapshotAllColumns,
			monthlyPaymentItemSnapshotPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update monthly_payment_item_snapshots, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"monthly_payment_item_snapshots\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, monthlyPaymentItemSnapshotPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(monthlyPaymentItemSnapshotType, monthlyPaymentItemSnapshotMapping, append(wl, monthlyPaymentItemSnapshotPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update monthly_payment_item_snapshots row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for monthly_payment_item_snapshots")
	}

	if !cached {
		monthlyPaymentItemSnapshotUpdateCacheMut.Lock()
		monthlyPaymentItemSnapshotUpdateCache[key] = cache
		monthlyPaymentItemSnapshotUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q monthlyPaymentItemSnapshotQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q monthlyPaymentItemSnapshotQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for monthly_payment_item_snapshots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for monthly_payment_item_snapshots")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MonthlyPaymentItemSnapshotSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MonthlyPaymentItemSnapshotSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monthlyPaymentItemSnapshotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"monthly_payment_item_snapshots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, monthlyPaymentItemSnapshotPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in monthlyPaymentItemSnapshot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all monthlyPaymentItemSnapshot")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *MonthlyPaymentItemSnapshot) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MonthlyPaymentItemSnapshot) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no monthly_payment_item_snapshots provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(monthlyPaymentItemSnapshotColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	monthlyPaymentItemSnapshotUpsertCacheMut.RLock()
	cache, cached := monthlyPaymentItemSnapshotUpsertCache[key]
	monthlyPaymentItemSnapshotUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			monthlyPaymentItemSnapshotAllColumns,
			monthlyPaymentItemSnapshotColumnsWithDefault,
			monthlyPaymentItemSnapshotColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			monthlyPaymentItemSnapshotAllColumns,
			monthlyPaymentItemSnapshotPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert monthly_payment_item_snapshots, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(monthlyPaymentItemSnapshotPrimaryKeyColumns))
			copy(conflict, monthlyPaymentItemSnapshotPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"monthly_payment_item_snapshots\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(monthlyPaymentItemSnapshotType, monthlyPaymentItemSnapshotMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(monthlyPaymentItemSnapshotType, monthlyPaymentItemSnapshotMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert monthly_payment_item_snapshots")
	}

	if !cached {
		monthlyPaymentItemSnapshotUpsertCacheMut.Lock()
		monthlyPaymentItemSnapshotUpsertCache[key] = cache
		monthlyPaymentItemSnapshotUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single MonthlyPaymentItemSnapshot record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *MonthlyPaymentItemSnapshot) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single MonthlyPaymentItemSnapshot record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MonthlyPaymentItemSnapshot) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MonthlyPaymentItemSnapshot provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), monthlyPaymentItemSnapshotPrimaryKeyMapping)
	sql := "DELETE FROM \"monthly_payment_item_snapshots\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from monthly_payment_item_snapshots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for monthly_payment_item_snapshots")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q monthlyPaymentItemSnapshotQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q monthlyPaymentItemSnapshotQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no monthlyPaymentItemSnapshotQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from monthly_payment_item_snapshots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for monthly_payment_item_snapshots")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MonthlyPaymentItemSnapshotSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MonthlyPaymentItemSnapshotSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(monthlyPaymentItemSnapshotBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monthlyPaymentItemSnapshotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"monthly_payment_item_snapshots\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, monthlyPaymentItemSnapshotPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from monthlyPaymentItemSnapshot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for monthly_payment_item_snapshots")
	}

	if len(monthlyPaymentItemSnapshotAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *MonthlyPaymentItemSnapshot) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no MonthlyPaymentItemSnapshot provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MonthlyPaymentItemSnapshot) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMonthlyPaymentItemSnapshot(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MonthlyPaymentItemSnapshotSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty MonthlyPaymentItemSnapshotSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MonthlyPaymentItemSnapshotSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MonthlyPaymentItemSnapshotSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monthlyPaymentItemSnapshotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"monthly_payment_item_snapshots\".* FROM \"monthly_payment_item_snapshots\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, monthlyPaymentItemSnapshotPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MonthlyPaymentItemSnapshotSlice")
	}

	*o = slice

	return nil
}

// MonthlyPaymentItemSnapshotExistsG checks if the MonthlyPaymentItemSnapshot row exists.
func MonthlyPaymentItemSnapshotExistsG(ctx context.Context, iD int) (bool, error) {
	return MonthlyPaymentItemSnapshotExists(ctx, boil.GetContextDB(), iD)
}

// MonthlyPaymentItemSnapshotExists checks if the MonthlyPaymentItemSnapshot row exists.
func MonthlyPaymentItemSnapshotExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"monthly_payment_item_snapshots\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if monthly_payment_item_snapshots exists")
	}

	return exists, nil
}

// Exists checks if the MonthlyPaymentItemSnapshot row exists.
func (o *MonthlyPaymentItemSnapshot) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MonthlyPaymentItemSnapshotExists(ctx, exec, o.ID)
}
