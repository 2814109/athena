package presentations

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"log"
	"my_gql_server/graph"
	"my_gql_server/graph/model"
	"my_gql_server/graph/validation"
	"my_gql_server/infrastructures/repositories"
	models "my_gql_server/my_models"

	"my_gql_server/usecases"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.CreateTodo) (*models.Todo, error) {
	if err := validation.Handler(input); err != nil {
		return nil, err
	}
	log.Print("run exec create todo")

	todo, err := repositories.CreateTodo(ctx, input)

	if err != nil {
		return nil, err
	}

	return todo, nil
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, input model.UpdateTodo) (*models.Todo, error) {
	if err := validation.Handler(input); err != nil {
		return nil, err
	}
	log.Print("run exec update todo")

	todo, err := repositories.UpdateTodo(ctx, input)

	if err != nil {
		return nil, err
	}

	return todo, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*models.User, error) {
	if err := validation.Handler(input); err != nil {
		return nil, err
	}
	return nil, nil
}

// CreateEnty is the resolver for the createEnty field.
func (r *mutationResolver) CreateEnty(ctx context.Context, input model.CreateEntryRequest) (*models.Entry, error) {
	bookkeepingUseCase := usecases.NewBookkeepingService()

	err := bookkeepingUseCase.CreateEntry(ctx, input)
	if err != nil {
		return nil, err
	}
	return nil, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
