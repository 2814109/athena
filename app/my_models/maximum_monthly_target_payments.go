// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// MaximumMonthlyTargetPayment is an object representing the database table.
type MaximumMonthlyTargetPayment struct {
	ID            int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	MonthlyAmount types.NullDecimal `boil:"monthly_amount" json:"monthly_amount,omitempty" toml:"monthly_amount" yaml:"monthly_amount,omitempty"`
	CreatedAt     time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	UserID        int               `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`

	R *maximumMonthlyTargetPaymentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L maximumMonthlyTargetPaymentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MaximumMonthlyTargetPaymentColumns = struct {
	ID            string
	MonthlyAmount string
	CreatedAt     string
	UpdatedAt     string
	UserID        string
}{
	ID:            "id",
	MonthlyAmount: "monthly_amount",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	UserID:        "user_id",
}

var MaximumMonthlyTargetPaymentTableColumns = struct {
	ID            string
	MonthlyAmount string
	CreatedAt     string
	UpdatedAt     string
	UserID        string
}{
	ID:            "maximum_monthly_target_payments.id",
	MonthlyAmount: "maximum_monthly_target_payments.monthly_amount",
	CreatedAt:     "maximum_monthly_target_payments.created_at",
	UpdatedAt:     "maximum_monthly_target_payments.updated_at",
	UserID:        "maximum_monthly_target_payments.user_id",
}

// Generated where

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var MaximumMonthlyTargetPaymentWhere = struct {
	ID            whereHelperint
	MonthlyAmount whereHelpertypes_NullDecimal
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	UserID        whereHelperint
}{
	ID:            whereHelperint{field: "\"maximum_monthly_target_payments\".\"id\""},
	MonthlyAmount: whereHelpertypes_NullDecimal{field: "\"maximum_monthly_target_payments\".\"monthly_amount\""},
	CreatedAt:     whereHelpertime_Time{field: "\"maximum_monthly_target_payments\".\"created_at\""},
	UpdatedAt:     whereHelpertime_Time{field: "\"maximum_monthly_target_payments\".\"updated_at\""},
	UserID:        whereHelperint{field: "\"maximum_monthly_target_payments\".\"user_id\""},
}

// MaximumMonthlyTargetPaymentRels is where relationship names are stored.
var MaximumMonthlyTargetPaymentRels = struct {
	User string
}{
	User: "User",
}

// maximumMonthlyTargetPaymentR is where relationships are stored.
type maximumMonthlyTargetPaymentR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*maximumMonthlyTargetPaymentR) NewStruct() *maximumMonthlyTargetPaymentR {
	return &maximumMonthlyTargetPaymentR{}
}

func (r *maximumMonthlyTargetPaymentR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// maximumMonthlyTargetPaymentL is where Load methods for each relationship are stored.
type maximumMonthlyTargetPaymentL struct{}

var (
	maximumMonthlyTargetPaymentAllColumns            = []string{"id", "monthly_amount", "created_at", "updated_at", "user_id"}
	maximumMonthlyTargetPaymentColumnsWithoutDefault = []string{"created_at", "updated_at"}
	maximumMonthlyTargetPaymentColumnsWithDefault    = []string{"id", "monthly_amount", "user_id"}
	maximumMonthlyTargetPaymentPrimaryKeyColumns     = []string{"id"}
	maximumMonthlyTargetPaymentGeneratedColumns      = []string{}
)

type (
	// MaximumMonthlyTargetPaymentSlice is an alias for a slice of pointers to MaximumMonthlyTargetPayment.
	// This should almost always be used instead of []MaximumMonthlyTargetPayment.
	MaximumMonthlyTargetPaymentSlice []*MaximumMonthlyTargetPayment
	// MaximumMonthlyTargetPaymentHook is the signature for custom MaximumMonthlyTargetPayment hook methods
	MaximumMonthlyTargetPaymentHook func(context.Context, boil.ContextExecutor, *MaximumMonthlyTargetPayment) error

	maximumMonthlyTargetPaymentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	maximumMonthlyTargetPaymentType                 = reflect.TypeOf(&MaximumMonthlyTargetPayment{})
	maximumMonthlyTargetPaymentMapping              = queries.MakeStructMapping(maximumMonthlyTargetPaymentType)
	maximumMonthlyTargetPaymentPrimaryKeyMapping, _ = queries.BindMapping(maximumMonthlyTargetPaymentType, maximumMonthlyTargetPaymentMapping, maximumMonthlyTargetPaymentPrimaryKeyColumns)
	maximumMonthlyTargetPaymentInsertCacheMut       sync.RWMutex
	maximumMonthlyTargetPaymentInsertCache          = make(map[string]insertCache)
	maximumMonthlyTargetPaymentUpdateCacheMut       sync.RWMutex
	maximumMonthlyTargetPaymentUpdateCache          = make(map[string]updateCache)
	maximumMonthlyTargetPaymentUpsertCacheMut       sync.RWMutex
	maximumMonthlyTargetPaymentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var maximumMonthlyTargetPaymentAfterSelectHooks []MaximumMonthlyTargetPaymentHook

var maximumMonthlyTargetPaymentBeforeInsertHooks []MaximumMonthlyTargetPaymentHook
var maximumMonthlyTargetPaymentAfterInsertHooks []MaximumMonthlyTargetPaymentHook

var maximumMonthlyTargetPaymentBeforeUpdateHooks []MaximumMonthlyTargetPaymentHook
var maximumMonthlyTargetPaymentAfterUpdateHooks []MaximumMonthlyTargetPaymentHook

var maximumMonthlyTargetPaymentBeforeDeleteHooks []MaximumMonthlyTargetPaymentHook
var maximumMonthlyTargetPaymentAfterDeleteHooks []MaximumMonthlyTargetPaymentHook

var maximumMonthlyTargetPaymentBeforeUpsertHooks []MaximumMonthlyTargetPaymentHook
var maximumMonthlyTargetPaymentAfterUpsertHooks []MaximumMonthlyTargetPaymentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MaximumMonthlyTargetPayment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range maximumMonthlyTargetPaymentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MaximumMonthlyTargetPayment) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range maximumMonthlyTargetPaymentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MaximumMonthlyTargetPayment) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range maximumMonthlyTargetPaymentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MaximumMonthlyTargetPayment) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range maximumMonthlyTargetPaymentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MaximumMonthlyTargetPayment) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range maximumMonthlyTargetPaymentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MaximumMonthlyTargetPayment) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range maximumMonthlyTargetPaymentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MaximumMonthlyTargetPayment) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range maximumMonthlyTargetPaymentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MaximumMonthlyTargetPayment) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range maximumMonthlyTargetPaymentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MaximumMonthlyTargetPayment) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range maximumMonthlyTargetPaymentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMaximumMonthlyTargetPaymentHook registers your hook function for all future operations.
func AddMaximumMonthlyTargetPaymentHook(hookPoint boil.HookPoint, maximumMonthlyTargetPaymentHook MaximumMonthlyTargetPaymentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		maximumMonthlyTargetPaymentAfterSelectHooks = append(maximumMonthlyTargetPaymentAfterSelectHooks, maximumMonthlyTargetPaymentHook)
	case boil.BeforeInsertHook:
		maximumMonthlyTargetPaymentBeforeInsertHooks = append(maximumMonthlyTargetPaymentBeforeInsertHooks, maximumMonthlyTargetPaymentHook)
	case boil.AfterInsertHook:
		maximumMonthlyTargetPaymentAfterInsertHooks = append(maximumMonthlyTargetPaymentAfterInsertHooks, maximumMonthlyTargetPaymentHook)
	case boil.BeforeUpdateHook:
		maximumMonthlyTargetPaymentBeforeUpdateHooks = append(maximumMonthlyTargetPaymentBeforeUpdateHooks, maximumMonthlyTargetPaymentHook)
	case boil.AfterUpdateHook:
		maximumMonthlyTargetPaymentAfterUpdateHooks = append(maximumMonthlyTargetPaymentAfterUpdateHooks, maximumMonthlyTargetPaymentHook)
	case boil.BeforeDeleteHook:
		maximumMonthlyTargetPaymentBeforeDeleteHooks = append(maximumMonthlyTargetPaymentBeforeDeleteHooks, maximumMonthlyTargetPaymentHook)
	case boil.AfterDeleteHook:
		maximumMonthlyTargetPaymentAfterDeleteHooks = append(maximumMonthlyTargetPaymentAfterDeleteHooks, maximumMonthlyTargetPaymentHook)
	case boil.BeforeUpsertHook:
		maximumMonthlyTargetPaymentBeforeUpsertHooks = append(maximumMonthlyTargetPaymentBeforeUpsertHooks, maximumMonthlyTargetPaymentHook)
	case boil.AfterUpsertHook:
		maximumMonthlyTargetPaymentAfterUpsertHooks = append(maximumMonthlyTargetPaymentAfterUpsertHooks, maximumMonthlyTargetPaymentHook)
	}
}

// OneG returns a single maximumMonthlyTargetPayment record from the query using the global executor.
func (q maximumMonthlyTargetPaymentQuery) OneG(ctx context.Context) (*MaximumMonthlyTargetPayment, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single maximumMonthlyTargetPayment record from the query.
func (q maximumMonthlyTargetPaymentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MaximumMonthlyTargetPayment, error) {
	o := &MaximumMonthlyTargetPayment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for maximum_monthly_target_payments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all MaximumMonthlyTargetPayment records from the query using the global executor.
func (q maximumMonthlyTargetPaymentQuery) AllG(ctx context.Context) (MaximumMonthlyTargetPaymentSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all MaximumMonthlyTargetPayment records from the query.
func (q maximumMonthlyTargetPaymentQuery) All(ctx context.Context, exec boil.ContextExecutor) (MaximumMonthlyTargetPaymentSlice, error) {
	var o []*MaximumMonthlyTargetPayment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MaximumMonthlyTargetPayment slice")
	}

	if len(maximumMonthlyTargetPaymentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all MaximumMonthlyTargetPayment records in the query using the global executor
func (q maximumMonthlyTargetPaymentQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all MaximumMonthlyTargetPayment records in the query.
func (q maximumMonthlyTargetPaymentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count maximum_monthly_target_payments rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q maximumMonthlyTargetPaymentQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q maximumMonthlyTargetPaymentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if maximum_monthly_target_payments exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *MaximumMonthlyTargetPayment) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (maximumMonthlyTargetPaymentL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMaximumMonthlyTargetPayment interface{}, mods queries.Applicator) error {
	var slice []*MaximumMonthlyTargetPayment
	var object *MaximumMonthlyTargetPayment

	if singular {
		var ok bool
		object, ok = maybeMaximumMonthlyTargetPayment.(*MaximumMonthlyTargetPayment)
		if !ok {
			object = new(MaximumMonthlyTargetPayment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMaximumMonthlyTargetPayment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMaximumMonthlyTargetPayment))
			}
		}
	} else {
		s, ok := maybeMaximumMonthlyTargetPayment.(*[]*MaximumMonthlyTargetPayment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMaximumMonthlyTargetPayment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMaximumMonthlyTargetPayment))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &maximumMonthlyTargetPaymentR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &maximumMonthlyTargetPaymentR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.MaximumMonthlyTargetPayments = append(foreign.R.MaximumMonthlyTargetPayments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.MaximumMonthlyTargetPayments = append(foreign.R.MaximumMonthlyTargetPayments, local)
				break
			}
		}
	}

	return nil
}

// SetUserG of the maximumMonthlyTargetPayment to the related item.
// Sets o.R.User to related.
// Adds o to related.R.MaximumMonthlyTargetPayments.
// Uses the global database handle.
func (o *MaximumMonthlyTargetPayment) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the maximumMonthlyTargetPayment to the related item.
// Sets o.R.User to related.
// Adds o to related.R.MaximumMonthlyTargetPayments.
func (o *MaximumMonthlyTargetPayment) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"maximum_monthly_target_payments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, maximumMonthlyTargetPaymentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &maximumMonthlyTargetPaymentR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			MaximumMonthlyTargetPayments: MaximumMonthlyTargetPaymentSlice{o},
		}
	} else {
		related.R.MaximumMonthlyTargetPayments = append(related.R.MaximumMonthlyTargetPayments, o)
	}

	return nil
}

// MaximumMonthlyTargetPayments retrieves all the records using an executor.
func MaximumMonthlyTargetPayments(mods ...qm.QueryMod) maximumMonthlyTargetPaymentQuery {
	mods = append(mods, qm.From("\"maximum_monthly_target_payments\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"maximum_monthly_target_payments\".*"})
	}

	return maximumMonthlyTargetPaymentQuery{q}
}

// FindMaximumMonthlyTargetPaymentG retrieves a single record by ID.
func FindMaximumMonthlyTargetPaymentG(ctx context.Context, iD int, selectCols ...string) (*MaximumMonthlyTargetPayment, error) {
	return FindMaximumMonthlyTargetPayment(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindMaximumMonthlyTargetPayment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMaximumMonthlyTargetPayment(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MaximumMonthlyTargetPayment, error) {
	maximumMonthlyTargetPaymentObj := &MaximumMonthlyTargetPayment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"maximum_monthly_target_payments\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, maximumMonthlyTargetPaymentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from maximum_monthly_target_payments")
	}

	if err = maximumMonthlyTargetPaymentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return maximumMonthlyTargetPaymentObj, err
	}

	return maximumMonthlyTargetPaymentObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MaximumMonthlyTargetPayment) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MaximumMonthlyTargetPayment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no maximum_monthly_target_payments provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(maximumMonthlyTargetPaymentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	maximumMonthlyTargetPaymentInsertCacheMut.RLock()
	cache, cached := maximumMonthlyTargetPaymentInsertCache[key]
	maximumMonthlyTargetPaymentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			maximumMonthlyTargetPaymentAllColumns,
			maximumMonthlyTargetPaymentColumnsWithDefault,
			maximumMonthlyTargetPaymentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(maximumMonthlyTargetPaymentType, maximumMonthlyTargetPaymentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(maximumMonthlyTargetPaymentType, maximumMonthlyTargetPaymentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"maximum_monthly_target_payments\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"maximum_monthly_target_payments\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into maximum_monthly_target_payments")
	}

	if !cached {
		maximumMonthlyTargetPaymentInsertCacheMut.Lock()
		maximumMonthlyTargetPaymentInsertCache[key] = cache
		maximumMonthlyTargetPaymentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single MaximumMonthlyTargetPayment record using the global executor.
// See Update for more documentation.
func (o *MaximumMonthlyTargetPayment) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the MaximumMonthlyTargetPayment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MaximumMonthlyTargetPayment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	maximumMonthlyTargetPaymentUpdateCacheMut.RLock()
	cache, cached := maximumMonthlyTargetPaymentUpdateCache[key]
	maximumMonthlyTargetPaymentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			maximumMonthlyTargetPaymentAllColumns,
			maximumMonthlyTargetPaymentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update maximum_monthly_target_payments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"maximum_monthly_target_payments\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, maximumMonthlyTargetPaymentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(maximumMonthlyTargetPaymentType, maximumMonthlyTargetPaymentMapping, append(wl, maximumMonthlyTargetPaymentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update maximum_monthly_target_payments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for maximum_monthly_target_payments")
	}

	if !cached {
		maximumMonthlyTargetPaymentUpdateCacheMut.Lock()
		maximumMonthlyTargetPaymentUpdateCache[key] = cache
		maximumMonthlyTargetPaymentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q maximumMonthlyTargetPaymentQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q maximumMonthlyTargetPaymentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for maximum_monthly_target_payments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for maximum_monthly_target_payments")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MaximumMonthlyTargetPaymentSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MaximumMonthlyTargetPaymentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), maximumMonthlyTargetPaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"maximum_monthly_target_payments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, maximumMonthlyTargetPaymentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in maximumMonthlyTargetPayment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all maximumMonthlyTargetPayment")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *MaximumMonthlyTargetPayment) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MaximumMonthlyTargetPayment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no maximum_monthly_target_payments provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(maximumMonthlyTargetPaymentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	maximumMonthlyTargetPaymentUpsertCacheMut.RLock()
	cache, cached := maximumMonthlyTargetPaymentUpsertCache[key]
	maximumMonthlyTargetPaymentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			maximumMonthlyTargetPaymentAllColumns,
			maximumMonthlyTargetPaymentColumnsWithDefault,
			maximumMonthlyTargetPaymentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			maximumMonthlyTargetPaymentAllColumns,
			maximumMonthlyTargetPaymentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert maximum_monthly_target_payments, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(maximumMonthlyTargetPaymentPrimaryKeyColumns))
			copy(conflict, maximumMonthlyTargetPaymentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"maximum_monthly_target_payments\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(maximumMonthlyTargetPaymentType, maximumMonthlyTargetPaymentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(maximumMonthlyTargetPaymentType, maximumMonthlyTargetPaymentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert maximum_monthly_target_payments")
	}

	if !cached {
		maximumMonthlyTargetPaymentUpsertCacheMut.Lock()
		maximumMonthlyTargetPaymentUpsertCache[key] = cache
		maximumMonthlyTargetPaymentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single MaximumMonthlyTargetPayment record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *MaximumMonthlyTargetPayment) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single MaximumMonthlyTargetPayment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MaximumMonthlyTargetPayment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MaximumMonthlyTargetPayment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), maximumMonthlyTargetPaymentPrimaryKeyMapping)
	sql := "DELETE FROM \"maximum_monthly_target_payments\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from maximum_monthly_target_payments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for maximum_monthly_target_payments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q maximumMonthlyTargetPaymentQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q maximumMonthlyTargetPaymentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no maximumMonthlyTargetPaymentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from maximum_monthly_target_payments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for maximum_monthly_target_payments")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MaximumMonthlyTargetPaymentSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MaximumMonthlyTargetPaymentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(maximumMonthlyTargetPaymentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), maximumMonthlyTargetPaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"maximum_monthly_target_payments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, maximumMonthlyTargetPaymentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from maximumMonthlyTargetPayment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for maximum_monthly_target_payments")
	}

	if len(maximumMonthlyTargetPaymentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *MaximumMonthlyTargetPayment) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no MaximumMonthlyTargetPayment provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MaximumMonthlyTargetPayment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMaximumMonthlyTargetPayment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MaximumMonthlyTargetPaymentSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty MaximumMonthlyTargetPaymentSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MaximumMonthlyTargetPaymentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MaximumMonthlyTargetPaymentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), maximumMonthlyTargetPaymentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"maximum_monthly_target_payments\".* FROM \"maximum_monthly_target_payments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, maximumMonthlyTargetPaymentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MaximumMonthlyTargetPaymentSlice")
	}

	*o = slice

	return nil
}

// MaximumMonthlyTargetPaymentExistsG checks if the MaximumMonthlyTargetPayment row exists.
func MaximumMonthlyTargetPaymentExistsG(ctx context.Context, iD int) (bool, error) {
	return MaximumMonthlyTargetPaymentExists(ctx, boil.GetContextDB(), iD)
}

// MaximumMonthlyTargetPaymentExists checks if the MaximumMonthlyTargetPayment row exists.
func MaximumMonthlyTargetPaymentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"maximum_monthly_target_payments\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if maximum_monthly_target_payments exists")
	}

	return exists, nil
}

// Exists checks if the MaximumMonthlyTargetPayment row exists.
func (o *MaximumMonthlyTargetPayment) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MaximumMonthlyTargetPaymentExists(ctx, exec, o.ID)
}
