// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Credit is an object representing the database table.
type Credit struct {
	ID          int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	EntryID     null.Int      `boil:"entry_id" json:"entry_id,omitempty" toml:"entry_id" yaml:"entry_id,omitempty"`
	AccountName string        `boil:"account_name" json:"account_name" toml:"account_name" yaml:"account_name"`
	Amount      types.Decimal `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`

	R *creditR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L creditL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CreditColumns = struct {
	ID          string
	EntryID     string
	AccountName string
	Amount      string
}{
	ID:          "id",
	EntryID:     "entry_id",
	AccountName: "account_name",
	Amount:      "amount",
}

var CreditTableColumns = struct {
	ID          string
	EntryID     string
	AccountName string
	Amount      string
}{
	ID:          "credits.id",
	EntryID:     "credits.entry_id",
	AccountName: "credits.account_name",
	Amount:      "credits.amount",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CreditWhere = struct {
	ID          whereHelperint
	EntryID     whereHelpernull_Int
	AccountName whereHelperstring
	Amount      whereHelpertypes_Decimal
}{
	ID:          whereHelperint{field: "\"credits\".\"id\""},
	EntryID:     whereHelpernull_Int{field: "\"credits\".\"entry_id\""},
	AccountName: whereHelperstring{field: "\"credits\".\"account_name\""},
	Amount:      whereHelpertypes_Decimal{field: "\"credits\".\"amount\""},
}

// CreditRels is where relationship names are stored.
var CreditRels = struct {
	Entry string
}{
	Entry: "Entry",
}

// creditR is where relationships are stored.
type creditR struct {
	Entry *Entry `boil:"Entry" json:"Entry" toml:"Entry" yaml:"Entry"`
}

// NewStruct creates a new relationship struct
func (*creditR) NewStruct() *creditR {
	return &creditR{}
}

func (r *creditR) GetEntry() *Entry {
	if r == nil {
		return nil
	}
	return r.Entry
}

// creditL is where Load methods for each relationship are stored.
type creditL struct{}

var (
	creditAllColumns            = []string{"id", "entry_id", "account_name", "amount"}
	creditColumnsWithoutDefault = []string{"account_name", "amount"}
	creditColumnsWithDefault    = []string{"id", "entry_id"}
	creditPrimaryKeyColumns     = []string{"id"}
	creditGeneratedColumns      = []string{}
)

type (
	// CreditSlice is an alias for a slice of pointers to Credit.
	// This should almost always be used instead of []Credit.
	CreditSlice []*Credit
	// CreditHook is the signature for custom Credit hook methods
	CreditHook func(context.Context, boil.ContextExecutor, *Credit) error

	creditQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	creditType                 = reflect.TypeOf(&Credit{})
	creditMapping              = queries.MakeStructMapping(creditType)
	creditPrimaryKeyMapping, _ = queries.BindMapping(creditType, creditMapping, creditPrimaryKeyColumns)
	creditInsertCacheMut       sync.RWMutex
	creditInsertCache          = make(map[string]insertCache)
	creditUpdateCacheMut       sync.RWMutex
	creditUpdateCache          = make(map[string]updateCache)
	creditUpsertCacheMut       sync.RWMutex
	creditUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var creditAfterSelectHooks []CreditHook

var creditBeforeInsertHooks []CreditHook
var creditAfterInsertHooks []CreditHook

var creditBeforeUpdateHooks []CreditHook
var creditAfterUpdateHooks []CreditHook

var creditBeforeDeleteHooks []CreditHook
var creditAfterDeleteHooks []CreditHook

var creditBeforeUpsertHooks []CreditHook
var creditAfterUpsertHooks []CreditHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Credit) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Credit) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Credit) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Credit) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Credit) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Credit) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Credit) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Credit) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Credit) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range creditAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCreditHook registers your hook function for all future operations.
func AddCreditHook(hookPoint boil.HookPoint, creditHook CreditHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		creditAfterSelectHooks = append(creditAfterSelectHooks, creditHook)
	case boil.BeforeInsertHook:
		creditBeforeInsertHooks = append(creditBeforeInsertHooks, creditHook)
	case boil.AfterInsertHook:
		creditAfterInsertHooks = append(creditAfterInsertHooks, creditHook)
	case boil.BeforeUpdateHook:
		creditBeforeUpdateHooks = append(creditBeforeUpdateHooks, creditHook)
	case boil.AfterUpdateHook:
		creditAfterUpdateHooks = append(creditAfterUpdateHooks, creditHook)
	case boil.BeforeDeleteHook:
		creditBeforeDeleteHooks = append(creditBeforeDeleteHooks, creditHook)
	case boil.AfterDeleteHook:
		creditAfterDeleteHooks = append(creditAfterDeleteHooks, creditHook)
	case boil.BeforeUpsertHook:
		creditBeforeUpsertHooks = append(creditBeforeUpsertHooks, creditHook)
	case boil.AfterUpsertHook:
		creditAfterUpsertHooks = append(creditAfterUpsertHooks, creditHook)
	}
}

// OneG returns a single credit record from the query using the global executor.
func (q creditQuery) OneG(ctx context.Context) (*Credit, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single credit record from the query.
func (q creditQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Credit, error) {
	o := &Credit{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for credits")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Credit records from the query using the global executor.
func (q creditQuery) AllG(ctx context.Context) (CreditSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Credit records from the query.
func (q creditQuery) All(ctx context.Context, exec boil.ContextExecutor) (CreditSlice, error) {
	var o []*Credit

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Credit slice")
	}

	if len(creditAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Credit records in the query using the global executor
func (q creditQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Credit records in the query.
func (q creditQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count credits rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q creditQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q creditQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if credits exists")
	}

	return count > 0, nil
}

// Entry pointed to by the foreign key.
func (o *Credit) Entry(mods ...qm.QueryMod) entryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.EntryID),
	}

	queryMods = append(queryMods, mods...)

	return Entries(queryMods...)
}

// LoadEntry allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (creditL) LoadEntry(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCredit interface{}, mods queries.Applicator) error {
	var slice []*Credit
	var object *Credit

	if singular {
		var ok bool
		object, ok = maybeCredit.(*Credit)
		if !ok {
			object = new(Credit)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCredit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCredit))
			}
		}
	} else {
		s, ok := maybeCredit.(*[]*Credit)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCredit)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCredit))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &creditR{}
		}
		if !queries.IsNil(object.EntryID) {
			args = append(args, object.EntryID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &creditR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.EntryID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.EntryID) {
				args = append(args, obj.EntryID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`entries`),
		qm.WhereIn(`entries.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Entry")
	}

	var resultSlice []*Entry
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Entry")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for entries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for entries")
	}

	if len(entryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Entry = foreign
		if foreign.R == nil {
			foreign.R = &entryR{}
		}
		foreign.R.Credits = append(foreign.R.Credits, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.EntryID, foreign.ID) {
				local.R.Entry = foreign
				if foreign.R == nil {
					foreign.R = &entryR{}
				}
				foreign.R.Credits = append(foreign.R.Credits, local)
				break
			}
		}
	}

	return nil
}

// SetEntryG of the credit to the related item.
// Sets o.R.Entry to related.
// Adds o to related.R.Credits.
// Uses the global database handle.
func (o *Credit) SetEntryG(ctx context.Context, insert bool, related *Entry) error {
	return o.SetEntry(ctx, boil.GetContextDB(), insert, related)
}

// SetEntry of the credit to the related item.
// Sets o.R.Entry to related.
// Adds o to related.R.Credits.
func (o *Credit) SetEntry(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Entry) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"credits\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"entry_id"}),
		strmangle.WhereClause("\"", "\"", 2, creditPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.EntryID, related.ID)
	if o.R == nil {
		o.R = &creditR{
			Entry: related,
		}
	} else {
		o.R.Entry = related
	}

	if related.R == nil {
		related.R = &entryR{
			Credits: CreditSlice{o},
		}
	} else {
		related.R.Credits = append(related.R.Credits, o)
	}

	return nil
}

// RemoveEntryG relationship.
// Sets o.R.Entry to nil.
// Removes o from all passed in related items' relationships struct.
// Uses the global database handle.
func (o *Credit) RemoveEntryG(ctx context.Context, related *Entry) error {
	return o.RemoveEntry(ctx, boil.GetContextDB(), related)
}

// RemoveEntry relationship.
// Sets o.R.Entry to nil.
// Removes o from all passed in related items' relationships struct.
func (o *Credit) RemoveEntry(ctx context.Context, exec boil.ContextExecutor, related *Entry) error {
	var err error

	queries.SetScanner(&o.EntryID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("entry_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Entry = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Credits {
		if queries.Equal(o.EntryID, ri.EntryID) {
			continue
		}

		ln := len(related.R.Credits)
		if ln > 1 && i < ln-1 {
			related.R.Credits[i] = related.R.Credits[ln-1]
		}
		related.R.Credits = related.R.Credits[:ln-1]
		break
	}
	return nil
}

// Credits retrieves all the records using an executor.
func Credits(mods ...qm.QueryMod) creditQuery {
	mods = append(mods, qm.From("\"credits\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"credits\".*"})
	}

	return creditQuery{q}
}

// FindCreditG retrieves a single record by ID.
func FindCreditG(ctx context.Context, iD int, selectCols ...string) (*Credit, error) {
	return FindCredit(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindCredit retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCredit(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Credit, error) {
	creditObj := &Credit{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"credits\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, creditObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from credits")
	}

	if err = creditObj.doAfterSelectHooks(ctx, exec); err != nil {
		return creditObj, err
	}

	return creditObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Credit) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Credit) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no credits provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(creditColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	creditInsertCacheMut.RLock()
	cache, cached := creditInsertCache[key]
	creditInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			creditAllColumns,
			creditColumnsWithDefault,
			creditColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(creditType, creditMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(creditType, creditMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"credits\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"credits\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into credits")
	}

	if !cached {
		creditInsertCacheMut.Lock()
		creditInsertCache[key] = cache
		creditInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Credit record using the global executor.
// See Update for more documentation.
func (o *Credit) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Credit.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Credit) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	creditUpdateCacheMut.RLock()
	cache, cached := creditUpdateCache[key]
	creditUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			creditAllColumns,
			creditPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update credits, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"credits\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, creditPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(creditType, creditMapping, append(wl, creditPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update credits row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for credits")
	}

	if !cached {
		creditUpdateCacheMut.Lock()
		creditUpdateCache[key] = cache
		creditUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q creditQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q creditQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for credits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for credits")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CreditSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CreditSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"credits\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, creditPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in credit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all credit")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Credit) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Credit) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no credits provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(creditColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	creditUpsertCacheMut.RLock()
	cache, cached := creditUpsertCache[key]
	creditUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			creditAllColumns,
			creditColumnsWithDefault,
			creditColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			creditAllColumns,
			creditPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert credits, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(creditPrimaryKeyColumns))
			copy(conflict, creditPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"credits\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(creditType, creditMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(creditType, creditMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert credits")
	}

	if !cached {
		creditUpsertCacheMut.Lock()
		creditUpsertCache[key] = cache
		creditUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Credit record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Credit) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Credit record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Credit) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Credit provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), creditPrimaryKeyMapping)
	sql := "DELETE FROM \"credits\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from credits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for credits")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q creditQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q creditQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no creditQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from credits")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for credits")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CreditSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CreditSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(creditBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"credits\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, creditPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from credit slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for credits")
	}

	if len(creditAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Credit) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Credit provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Credit) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCredit(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CreditSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty CreditSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CreditSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CreditSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), creditPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"credits\".* FROM \"credits\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, creditPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CreditSlice")
	}

	*o = slice

	return nil
}

// CreditExistsG checks if the Credit row exists.
func CreditExistsG(ctx context.Context, iD int) (bool, error) {
	return CreditExists(ctx, boil.GetContextDB(), iD)
}

// CreditExists checks if the Credit row exists.
func CreditExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"credits\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if credits exists")
	}

	return exists, nil
}

// Exists checks if the Credit row exists.
func (o *Credit) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CreditExists(ctx, exec, o.ID)
}
