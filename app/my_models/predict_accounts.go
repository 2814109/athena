// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// PredictAccount is an object representing the database table.
type PredictAccount struct {
	ID           int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	CategoryName string        `boil:"category_name" json:"category_name" toml:"category_name" yaml:"category_name"`
	Label        string        `boil:"label" json:"label" toml:"label" yaml:"label"`
	CreatedAt    time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Amount       types.Decimal `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`

	R *predictAccountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L predictAccountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PredictAccountColumns = struct {
	ID           string
	CategoryName string
	Label        string
	CreatedAt    string
	UpdatedAt    string
	Amount       string
}{
	ID:           "id",
	CategoryName: "category_name",
	Label:        "label",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	Amount:       "amount",
}

var PredictAccountTableColumns = struct {
	ID           string
	CategoryName string
	Label        string
	CreatedAt    string
	UpdatedAt    string
	Amount       string
}{
	ID:           "predict_accounts.id",
	CategoryName: "predict_accounts.category_name",
	Label:        "predict_accounts.label",
	CreatedAt:    "predict_accounts.created_at",
	UpdatedAt:    "predict_accounts.updated_at",
	Amount:       "predict_accounts.amount",
}

// Generated where

var PredictAccountWhere = struct {
	ID           whereHelperint
	CategoryName whereHelperstring
	Label        whereHelperstring
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
	Amount       whereHelpertypes_Decimal
}{
	ID:           whereHelperint{field: "\"predict_accounts\".\"id\""},
	CategoryName: whereHelperstring{field: "\"predict_accounts\".\"category_name\""},
	Label:        whereHelperstring{field: "\"predict_accounts\".\"label\""},
	CreatedAt:    whereHelpertime_Time{field: "\"predict_accounts\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"predict_accounts\".\"updated_at\""},
	Amount:       whereHelpertypes_Decimal{field: "\"predict_accounts\".\"amount\""},
}

// PredictAccountRels is where relationship names are stored.
var PredictAccountRels = struct {
	CategoryNameCategory string
}{
	CategoryNameCategory: "CategoryNameCategory",
}

// predictAccountR is where relationships are stored.
type predictAccountR struct {
	CategoryNameCategory *Category `boil:"CategoryNameCategory" json:"CategoryNameCategory" toml:"CategoryNameCategory" yaml:"CategoryNameCategory"`
}

// NewStruct creates a new relationship struct
func (*predictAccountR) NewStruct() *predictAccountR {
	return &predictAccountR{}
}

func (r *predictAccountR) GetCategoryNameCategory() *Category {
	if r == nil {
		return nil
	}
	return r.CategoryNameCategory
}

// predictAccountL is where Load methods for each relationship are stored.
type predictAccountL struct{}

var (
	predictAccountAllColumns            = []string{"id", "category_name", "label", "created_at", "updated_at", "amount"}
	predictAccountColumnsWithoutDefault = []string{"category_name", "label", "created_at", "updated_at", "amount"}
	predictAccountColumnsWithDefault    = []string{"id"}
	predictAccountPrimaryKeyColumns     = []string{"id"}
	predictAccountGeneratedColumns      = []string{}
)

type (
	// PredictAccountSlice is an alias for a slice of pointers to PredictAccount.
	// This should almost always be used instead of []PredictAccount.
	PredictAccountSlice []*PredictAccount
	// PredictAccountHook is the signature for custom PredictAccount hook methods
	PredictAccountHook func(context.Context, boil.ContextExecutor, *PredictAccount) error

	predictAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	predictAccountType                 = reflect.TypeOf(&PredictAccount{})
	predictAccountMapping              = queries.MakeStructMapping(predictAccountType)
	predictAccountPrimaryKeyMapping, _ = queries.BindMapping(predictAccountType, predictAccountMapping, predictAccountPrimaryKeyColumns)
	predictAccountInsertCacheMut       sync.RWMutex
	predictAccountInsertCache          = make(map[string]insertCache)
	predictAccountUpdateCacheMut       sync.RWMutex
	predictAccountUpdateCache          = make(map[string]updateCache)
	predictAccountUpsertCacheMut       sync.RWMutex
	predictAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var predictAccountAfterSelectHooks []PredictAccountHook

var predictAccountBeforeInsertHooks []PredictAccountHook
var predictAccountAfterInsertHooks []PredictAccountHook

var predictAccountBeforeUpdateHooks []PredictAccountHook
var predictAccountAfterUpdateHooks []PredictAccountHook

var predictAccountBeforeDeleteHooks []PredictAccountHook
var predictAccountAfterDeleteHooks []PredictAccountHook

var predictAccountBeforeUpsertHooks []PredictAccountHook
var predictAccountAfterUpsertHooks []PredictAccountHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PredictAccount) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range predictAccountAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PredictAccount) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range predictAccountBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PredictAccount) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range predictAccountAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PredictAccount) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range predictAccountBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PredictAccount) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range predictAccountAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PredictAccount) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range predictAccountBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PredictAccount) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range predictAccountAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PredictAccount) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range predictAccountBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PredictAccount) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range predictAccountAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPredictAccountHook registers your hook function for all future operations.
func AddPredictAccountHook(hookPoint boil.HookPoint, predictAccountHook PredictAccountHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		predictAccountAfterSelectHooks = append(predictAccountAfterSelectHooks, predictAccountHook)
	case boil.BeforeInsertHook:
		predictAccountBeforeInsertHooks = append(predictAccountBeforeInsertHooks, predictAccountHook)
	case boil.AfterInsertHook:
		predictAccountAfterInsertHooks = append(predictAccountAfterInsertHooks, predictAccountHook)
	case boil.BeforeUpdateHook:
		predictAccountBeforeUpdateHooks = append(predictAccountBeforeUpdateHooks, predictAccountHook)
	case boil.AfterUpdateHook:
		predictAccountAfterUpdateHooks = append(predictAccountAfterUpdateHooks, predictAccountHook)
	case boil.BeforeDeleteHook:
		predictAccountBeforeDeleteHooks = append(predictAccountBeforeDeleteHooks, predictAccountHook)
	case boil.AfterDeleteHook:
		predictAccountAfterDeleteHooks = append(predictAccountAfterDeleteHooks, predictAccountHook)
	case boil.BeforeUpsertHook:
		predictAccountBeforeUpsertHooks = append(predictAccountBeforeUpsertHooks, predictAccountHook)
	case boil.AfterUpsertHook:
		predictAccountAfterUpsertHooks = append(predictAccountAfterUpsertHooks, predictAccountHook)
	}
}

// OneG returns a single predictAccount record from the query using the global executor.
func (q predictAccountQuery) OneG(ctx context.Context) (*PredictAccount, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single predictAccount record from the query.
func (q predictAccountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PredictAccount, error) {
	o := &PredictAccount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for predict_accounts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all PredictAccount records from the query using the global executor.
func (q predictAccountQuery) AllG(ctx context.Context) (PredictAccountSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all PredictAccount records from the query.
func (q predictAccountQuery) All(ctx context.Context, exec boil.ContextExecutor) (PredictAccountSlice, error) {
	var o []*PredictAccount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PredictAccount slice")
	}

	if len(predictAccountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all PredictAccount records in the query using the global executor
func (q predictAccountQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all PredictAccount records in the query.
func (q predictAccountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count predict_accounts rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q predictAccountQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q predictAccountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if predict_accounts exists")
	}

	return count > 0, nil
}

// CategoryNameCategory pointed to by the foreign key.
func (o *PredictAccount) CategoryNameCategory(mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"classification\" = ?", o.CategoryName),
	}

	queryMods = append(queryMods, mods...)

	return Categories(queryMods...)
}

// LoadCategoryNameCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (predictAccountL) LoadCategoryNameCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybePredictAccount interface{}, mods queries.Applicator) error {
	var slice []*PredictAccount
	var object *PredictAccount

	if singular {
		var ok bool
		object, ok = maybePredictAccount.(*PredictAccount)
		if !ok {
			object = new(PredictAccount)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePredictAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePredictAccount))
			}
		}
	} else {
		s, ok := maybePredictAccount.(*[]*PredictAccount)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePredictAccount)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePredictAccount))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &predictAccountR{}
		}
		args = append(args, object.CategoryName)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &predictAccountR{}
			}

			for _, a := range args {
				if a == obj.CategoryName {
					continue Outer
				}
			}

			args = append(args, obj.CategoryName)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`categories`),
		qm.WhereIn(`categories.classification in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for categories")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for categories")
	}

	if len(categoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CategoryNameCategory = foreign
		if foreign.R == nil {
			foreign.R = &categoryR{}
		}
		foreign.R.CategoryNamePredictAccounts = append(foreign.R.CategoryNamePredictAccounts, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CategoryName == foreign.Classification {
				local.R.CategoryNameCategory = foreign
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.CategoryNamePredictAccounts = append(foreign.R.CategoryNamePredictAccounts, local)
				break
			}
		}
	}

	return nil
}

// SetCategoryNameCategoryG of the predictAccount to the related item.
// Sets o.R.CategoryNameCategory to related.
// Adds o to related.R.CategoryNamePredictAccounts.
// Uses the global database handle.
func (o *PredictAccount) SetCategoryNameCategoryG(ctx context.Context, insert bool, related *Category) error {
	return o.SetCategoryNameCategory(ctx, boil.GetContextDB(), insert, related)
}

// SetCategoryNameCategory of the predictAccount to the related item.
// Sets o.R.CategoryNameCategory to related.
// Adds o to related.R.CategoryNamePredictAccounts.
func (o *PredictAccount) SetCategoryNameCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"predict_accounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"category_name"}),
		strmangle.WhereClause("\"", "\"", 2, predictAccountPrimaryKeyColumns),
	)
	values := []interface{}{related.Classification, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CategoryName = related.Classification
	if o.R == nil {
		o.R = &predictAccountR{
			CategoryNameCategory: related,
		}
	} else {
		o.R.CategoryNameCategory = related
	}

	if related.R == nil {
		related.R = &categoryR{
			CategoryNamePredictAccounts: PredictAccountSlice{o},
		}
	} else {
		related.R.CategoryNamePredictAccounts = append(related.R.CategoryNamePredictAccounts, o)
	}

	return nil
}

// PredictAccounts retrieves all the records using an executor.
func PredictAccounts(mods ...qm.QueryMod) predictAccountQuery {
	mods = append(mods, qm.From("\"predict_accounts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"predict_accounts\".*"})
	}

	return predictAccountQuery{q}
}

// FindPredictAccountG retrieves a single record by ID.
func FindPredictAccountG(ctx context.Context, iD int, selectCols ...string) (*PredictAccount, error) {
	return FindPredictAccount(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindPredictAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPredictAccount(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*PredictAccount, error) {
	predictAccountObj := &PredictAccount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"predict_accounts\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, predictAccountObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from predict_accounts")
	}

	if err = predictAccountObj.doAfterSelectHooks(ctx, exec); err != nil {
		return predictAccountObj, err
	}

	return predictAccountObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *PredictAccount) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PredictAccount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no predict_accounts provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(predictAccountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	predictAccountInsertCacheMut.RLock()
	cache, cached := predictAccountInsertCache[key]
	predictAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			predictAccountAllColumns,
			predictAccountColumnsWithDefault,
			predictAccountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(predictAccountType, predictAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(predictAccountType, predictAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"predict_accounts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"predict_accounts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into predict_accounts")
	}

	if !cached {
		predictAccountInsertCacheMut.Lock()
		predictAccountInsertCache[key] = cache
		predictAccountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single PredictAccount record using the global executor.
// See Update for more documentation.
func (o *PredictAccount) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the PredictAccount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PredictAccount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	predictAccountUpdateCacheMut.RLock()
	cache, cached := predictAccountUpdateCache[key]
	predictAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			predictAccountAllColumns,
			predictAccountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update predict_accounts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"predict_accounts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, predictAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(predictAccountType, predictAccountMapping, append(wl, predictAccountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update predict_accounts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for predict_accounts")
	}

	if !cached {
		predictAccountUpdateCacheMut.Lock()
		predictAccountUpdateCache[key] = cache
		predictAccountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q predictAccountQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q predictAccountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for predict_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for predict_accounts")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PredictAccountSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PredictAccountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), predictAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"predict_accounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, predictAccountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in predictAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all predictAccount")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *PredictAccount) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PredictAccount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no predict_accounts provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(predictAccountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	predictAccountUpsertCacheMut.RLock()
	cache, cached := predictAccountUpsertCache[key]
	predictAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			predictAccountAllColumns,
			predictAccountColumnsWithDefault,
			predictAccountColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			predictAccountAllColumns,
			predictAccountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert predict_accounts, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(predictAccountPrimaryKeyColumns))
			copy(conflict, predictAccountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"predict_accounts\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(predictAccountType, predictAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(predictAccountType, predictAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert predict_accounts")
	}

	if !cached {
		predictAccountUpsertCacheMut.Lock()
		predictAccountUpsertCache[key] = cache
		predictAccountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single PredictAccount record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *PredictAccount) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single PredictAccount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PredictAccount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PredictAccount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), predictAccountPrimaryKeyMapping)
	sql := "DELETE FROM \"predict_accounts\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from predict_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for predict_accounts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q predictAccountQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q predictAccountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no predictAccountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from predict_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for predict_accounts")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o PredictAccountSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PredictAccountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(predictAccountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), predictAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"predict_accounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, predictAccountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from predictAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for predict_accounts")
	}

	if len(predictAccountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *PredictAccount) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no PredictAccount provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PredictAccount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPredictAccount(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PredictAccountSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty PredictAccountSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PredictAccountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PredictAccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), predictAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"predict_accounts\".* FROM \"predict_accounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, predictAccountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PredictAccountSlice")
	}

	*o = slice

	return nil
}

// PredictAccountExistsG checks if the PredictAccount row exists.
func PredictAccountExistsG(ctx context.Context, iD int) (bool, error) {
	return PredictAccountExists(ctx, boil.GetContextDB(), iD)
}

// PredictAccountExists checks if the PredictAccount row exists.
func PredictAccountExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"predict_accounts\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if predict_accounts exists")
	}

	return exists, nil
}

// Exists checks if the PredictAccount row exists.
func (o *PredictAccount) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PredictAccountExists(ctx, exec, o.ID)
}
