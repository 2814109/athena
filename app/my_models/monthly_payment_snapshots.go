// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// MonthlyPaymentSnapshot is an object representing the database table.
type MonthlyPaymentSnapshot struct {
	ID            int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	MonthlyAmount types.NullDecimal `boil:"monthly_amount" json:"monthly_amount,omitempty" toml:"monthly_amount" yaml:"monthly_amount,omitempty"`
	Month         time.Time         `boil:"month" json:"month" toml:"month" yaml:"month"`
	CreatedAt     time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UserID        int               `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`

	R *monthlyPaymentSnapshotR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L monthlyPaymentSnapshotL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MonthlyPaymentSnapshotColumns = struct {
	ID            string
	MonthlyAmount string
	Month         string
	CreatedAt     string
	UserID        string
}{
	ID:            "id",
	MonthlyAmount: "monthly_amount",
	Month:         "month",
	CreatedAt:     "created_at",
	UserID:        "user_id",
}

var MonthlyPaymentSnapshotTableColumns = struct {
	ID            string
	MonthlyAmount string
	Month         string
	CreatedAt     string
	UserID        string
}{
	ID:            "monthly_payment_snapshots.id",
	MonthlyAmount: "monthly_payment_snapshots.monthly_amount",
	Month:         "monthly_payment_snapshots.month",
	CreatedAt:     "monthly_payment_snapshots.created_at",
	UserID:        "monthly_payment_snapshots.user_id",
}

// Generated where

var MonthlyPaymentSnapshotWhere = struct {
	ID            whereHelperint
	MonthlyAmount whereHelpertypes_NullDecimal
	Month         whereHelpertime_Time
	CreatedAt     whereHelpertime_Time
	UserID        whereHelperint
}{
	ID:            whereHelperint{field: "\"monthly_payment_snapshots\".\"id\""},
	MonthlyAmount: whereHelpertypes_NullDecimal{field: "\"monthly_payment_snapshots\".\"monthly_amount\""},
	Month:         whereHelpertime_Time{field: "\"monthly_payment_snapshots\".\"month\""},
	CreatedAt:     whereHelpertime_Time{field: "\"monthly_payment_snapshots\".\"created_at\""},
	UserID:        whereHelperint{field: "\"monthly_payment_snapshots\".\"user_id\""},
}

// MonthlyPaymentSnapshotRels is where relationship names are stored.
var MonthlyPaymentSnapshotRels = struct {
	User                                      string
	MonthlyPaymentMonthlyPaymentItemSnapshots string
}{
	User: "User",
	MonthlyPaymentMonthlyPaymentItemSnapshots: "MonthlyPaymentMonthlyPaymentItemSnapshots",
}

// monthlyPaymentSnapshotR is where relationships are stored.
type monthlyPaymentSnapshotR struct {
	User                                      *User                           `boil:"User" json:"User" toml:"User" yaml:"User"`
	MonthlyPaymentMonthlyPaymentItemSnapshots MonthlyPaymentItemSnapshotSlice `boil:"MonthlyPaymentMonthlyPaymentItemSnapshots" json:"MonthlyPaymentMonthlyPaymentItemSnapshots" toml:"MonthlyPaymentMonthlyPaymentItemSnapshots" yaml:"MonthlyPaymentMonthlyPaymentItemSnapshots"`
}

// NewStruct creates a new relationship struct
func (*monthlyPaymentSnapshotR) NewStruct() *monthlyPaymentSnapshotR {
	return &monthlyPaymentSnapshotR{}
}

func (r *monthlyPaymentSnapshotR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *monthlyPaymentSnapshotR) GetMonthlyPaymentMonthlyPaymentItemSnapshots() MonthlyPaymentItemSnapshotSlice {
	if r == nil {
		return nil
	}
	return r.MonthlyPaymentMonthlyPaymentItemSnapshots
}

// monthlyPaymentSnapshotL is where Load methods for each relationship are stored.
type monthlyPaymentSnapshotL struct{}

var (
	monthlyPaymentSnapshotAllColumns            = []string{"id", "monthly_amount", "month", "created_at", "user_id"}
	monthlyPaymentSnapshotColumnsWithoutDefault = []string{"month", "created_at"}
	monthlyPaymentSnapshotColumnsWithDefault    = []string{"id", "monthly_amount", "user_id"}
	monthlyPaymentSnapshotPrimaryKeyColumns     = []string{"id"}
	monthlyPaymentSnapshotGeneratedColumns      = []string{}
)

type (
	// MonthlyPaymentSnapshotSlice is an alias for a slice of pointers to MonthlyPaymentSnapshot.
	// This should almost always be used instead of []MonthlyPaymentSnapshot.
	MonthlyPaymentSnapshotSlice []*MonthlyPaymentSnapshot
	// MonthlyPaymentSnapshotHook is the signature for custom MonthlyPaymentSnapshot hook methods
	MonthlyPaymentSnapshotHook func(context.Context, boil.ContextExecutor, *MonthlyPaymentSnapshot) error

	monthlyPaymentSnapshotQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	monthlyPaymentSnapshotType                 = reflect.TypeOf(&MonthlyPaymentSnapshot{})
	monthlyPaymentSnapshotMapping              = queries.MakeStructMapping(monthlyPaymentSnapshotType)
	monthlyPaymentSnapshotPrimaryKeyMapping, _ = queries.BindMapping(monthlyPaymentSnapshotType, monthlyPaymentSnapshotMapping, monthlyPaymentSnapshotPrimaryKeyColumns)
	monthlyPaymentSnapshotInsertCacheMut       sync.RWMutex
	monthlyPaymentSnapshotInsertCache          = make(map[string]insertCache)
	monthlyPaymentSnapshotUpdateCacheMut       sync.RWMutex
	monthlyPaymentSnapshotUpdateCache          = make(map[string]updateCache)
	monthlyPaymentSnapshotUpsertCacheMut       sync.RWMutex
	monthlyPaymentSnapshotUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var monthlyPaymentSnapshotAfterSelectHooks []MonthlyPaymentSnapshotHook

var monthlyPaymentSnapshotBeforeInsertHooks []MonthlyPaymentSnapshotHook
var monthlyPaymentSnapshotAfterInsertHooks []MonthlyPaymentSnapshotHook

var monthlyPaymentSnapshotBeforeUpdateHooks []MonthlyPaymentSnapshotHook
var monthlyPaymentSnapshotAfterUpdateHooks []MonthlyPaymentSnapshotHook

var monthlyPaymentSnapshotBeforeDeleteHooks []MonthlyPaymentSnapshotHook
var monthlyPaymentSnapshotAfterDeleteHooks []MonthlyPaymentSnapshotHook

var monthlyPaymentSnapshotBeforeUpsertHooks []MonthlyPaymentSnapshotHook
var monthlyPaymentSnapshotAfterUpsertHooks []MonthlyPaymentSnapshotHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MonthlyPaymentSnapshot) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyPaymentSnapshotAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MonthlyPaymentSnapshot) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyPaymentSnapshotBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MonthlyPaymentSnapshot) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyPaymentSnapshotAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MonthlyPaymentSnapshot) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyPaymentSnapshotBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MonthlyPaymentSnapshot) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyPaymentSnapshotAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MonthlyPaymentSnapshot) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyPaymentSnapshotBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MonthlyPaymentSnapshot) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyPaymentSnapshotAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MonthlyPaymentSnapshot) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyPaymentSnapshotBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MonthlyPaymentSnapshot) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyPaymentSnapshotAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMonthlyPaymentSnapshotHook registers your hook function for all future operations.
func AddMonthlyPaymentSnapshotHook(hookPoint boil.HookPoint, monthlyPaymentSnapshotHook MonthlyPaymentSnapshotHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		monthlyPaymentSnapshotAfterSelectHooks = append(monthlyPaymentSnapshotAfterSelectHooks, monthlyPaymentSnapshotHook)
	case boil.BeforeInsertHook:
		monthlyPaymentSnapshotBeforeInsertHooks = append(monthlyPaymentSnapshotBeforeInsertHooks, monthlyPaymentSnapshotHook)
	case boil.AfterInsertHook:
		monthlyPaymentSnapshotAfterInsertHooks = append(monthlyPaymentSnapshotAfterInsertHooks, monthlyPaymentSnapshotHook)
	case boil.BeforeUpdateHook:
		monthlyPaymentSnapshotBeforeUpdateHooks = append(monthlyPaymentSnapshotBeforeUpdateHooks, monthlyPaymentSnapshotHook)
	case boil.AfterUpdateHook:
		monthlyPaymentSnapshotAfterUpdateHooks = append(monthlyPaymentSnapshotAfterUpdateHooks, monthlyPaymentSnapshotHook)
	case boil.BeforeDeleteHook:
		monthlyPaymentSnapshotBeforeDeleteHooks = append(monthlyPaymentSnapshotBeforeDeleteHooks, monthlyPaymentSnapshotHook)
	case boil.AfterDeleteHook:
		monthlyPaymentSnapshotAfterDeleteHooks = append(monthlyPaymentSnapshotAfterDeleteHooks, monthlyPaymentSnapshotHook)
	case boil.BeforeUpsertHook:
		monthlyPaymentSnapshotBeforeUpsertHooks = append(monthlyPaymentSnapshotBeforeUpsertHooks, monthlyPaymentSnapshotHook)
	case boil.AfterUpsertHook:
		monthlyPaymentSnapshotAfterUpsertHooks = append(monthlyPaymentSnapshotAfterUpsertHooks, monthlyPaymentSnapshotHook)
	}
}

// OneG returns a single monthlyPaymentSnapshot record from the query using the global executor.
func (q monthlyPaymentSnapshotQuery) OneG(ctx context.Context) (*MonthlyPaymentSnapshot, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single monthlyPaymentSnapshot record from the query.
func (q monthlyPaymentSnapshotQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MonthlyPaymentSnapshot, error) {
	o := &MonthlyPaymentSnapshot{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for monthly_payment_snapshots")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all MonthlyPaymentSnapshot records from the query using the global executor.
func (q monthlyPaymentSnapshotQuery) AllG(ctx context.Context) (MonthlyPaymentSnapshotSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all MonthlyPaymentSnapshot records from the query.
func (q monthlyPaymentSnapshotQuery) All(ctx context.Context, exec boil.ContextExecutor) (MonthlyPaymentSnapshotSlice, error) {
	var o []*MonthlyPaymentSnapshot

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MonthlyPaymentSnapshot slice")
	}

	if len(monthlyPaymentSnapshotAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all MonthlyPaymentSnapshot records in the query using the global executor
func (q monthlyPaymentSnapshotQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all MonthlyPaymentSnapshot records in the query.
func (q monthlyPaymentSnapshotQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count monthly_payment_snapshots rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q monthlyPaymentSnapshotQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q monthlyPaymentSnapshotQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if monthly_payment_snapshots exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *MonthlyPaymentSnapshot) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// MonthlyPaymentMonthlyPaymentItemSnapshots retrieves all the monthly_payment_item_snapshot's MonthlyPaymentItemSnapshots with an executor via monthly_payment_id column.
func (o *MonthlyPaymentSnapshot) MonthlyPaymentMonthlyPaymentItemSnapshots(mods ...qm.QueryMod) monthlyPaymentItemSnapshotQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"monthly_payment_item_snapshots\".\"monthly_payment_id\"=?", o.ID),
	)

	return MonthlyPaymentItemSnapshots(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (monthlyPaymentSnapshotL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMonthlyPaymentSnapshot interface{}, mods queries.Applicator) error {
	var slice []*MonthlyPaymentSnapshot
	var object *MonthlyPaymentSnapshot

	if singular {
		var ok bool
		object, ok = maybeMonthlyPaymentSnapshot.(*MonthlyPaymentSnapshot)
		if !ok {
			object = new(MonthlyPaymentSnapshot)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMonthlyPaymentSnapshot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMonthlyPaymentSnapshot))
			}
		}
	} else {
		s, ok := maybeMonthlyPaymentSnapshot.(*[]*MonthlyPaymentSnapshot)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMonthlyPaymentSnapshot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMonthlyPaymentSnapshot))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &monthlyPaymentSnapshotR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &monthlyPaymentSnapshotR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.MonthlyPaymentSnapshots = append(foreign.R.MonthlyPaymentSnapshots, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.MonthlyPaymentSnapshots = append(foreign.R.MonthlyPaymentSnapshots, local)
				break
			}
		}
	}

	return nil
}

// LoadMonthlyPaymentMonthlyPaymentItemSnapshots allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (monthlyPaymentSnapshotL) LoadMonthlyPaymentMonthlyPaymentItemSnapshots(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMonthlyPaymentSnapshot interface{}, mods queries.Applicator) error {
	var slice []*MonthlyPaymentSnapshot
	var object *MonthlyPaymentSnapshot

	if singular {
		var ok bool
		object, ok = maybeMonthlyPaymentSnapshot.(*MonthlyPaymentSnapshot)
		if !ok {
			object = new(MonthlyPaymentSnapshot)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMonthlyPaymentSnapshot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMonthlyPaymentSnapshot))
			}
		}
	} else {
		s, ok := maybeMonthlyPaymentSnapshot.(*[]*MonthlyPaymentSnapshot)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMonthlyPaymentSnapshot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMonthlyPaymentSnapshot))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &monthlyPaymentSnapshotR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &monthlyPaymentSnapshotR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`monthly_payment_item_snapshots`),
		qm.WhereIn(`monthly_payment_item_snapshots.monthly_payment_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load monthly_payment_item_snapshots")
	}

	var resultSlice []*MonthlyPaymentItemSnapshot
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice monthly_payment_item_snapshots")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on monthly_payment_item_snapshots")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for monthly_payment_item_snapshots")
	}

	if len(monthlyPaymentItemSnapshotAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MonthlyPaymentMonthlyPaymentItemSnapshots = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &monthlyPaymentItemSnapshotR{}
			}
			foreign.R.MonthlyPayment = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MonthlyPaymentID {
				local.R.MonthlyPaymentMonthlyPaymentItemSnapshots = append(local.R.MonthlyPaymentMonthlyPaymentItemSnapshots, foreign)
				if foreign.R == nil {
					foreign.R = &monthlyPaymentItemSnapshotR{}
				}
				foreign.R.MonthlyPayment = local
				break
			}
		}
	}

	return nil
}

// SetUserG of the monthlyPaymentSnapshot to the related item.
// Sets o.R.User to related.
// Adds o to related.R.MonthlyPaymentSnapshots.
// Uses the global database handle.
func (o *MonthlyPaymentSnapshot) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the monthlyPaymentSnapshot to the related item.
// Sets o.R.User to related.
// Adds o to related.R.MonthlyPaymentSnapshots.
func (o *MonthlyPaymentSnapshot) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"monthly_payment_snapshots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, monthlyPaymentSnapshotPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &monthlyPaymentSnapshotR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			MonthlyPaymentSnapshots: MonthlyPaymentSnapshotSlice{o},
		}
	} else {
		related.R.MonthlyPaymentSnapshots = append(related.R.MonthlyPaymentSnapshots, o)
	}

	return nil
}

// AddMonthlyPaymentMonthlyPaymentItemSnapshotsG adds the given related objects to the existing relationships
// of the monthly_payment_snapshot, optionally inserting them as new records.
// Appends related to o.R.MonthlyPaymentMonthlyPaymentItemSnapshots.
// Sets related.R.MonthlyPayment appropriately.
// Uses the global database handle.
func (o *MonthlyPaymentSnapshot) AddMonthlyPaymentMonthlyPaymentItemSnapshotsG(ctx context.Context, insert bool, related ...*MonthlyPaymentItemSnapshot) error {
	return o.AddMonthlyPaymentMonthlyPaymentItemSnapshots(ctx, boil.GetContextDB(), insert, related...)
}

// AddMonthlyPaymentMonthlyPaymentItemSnapshots adds the given related objects to the existing relationships
// of the monthly_payment_snapshot, optionally inserting them as new records.
// Appends related to o.R.MonthlyPaymentMonthlyPaymentItemSnapshots.
// Sets related.R.MonthlyPayment appropriately.
func (o *MonthlyPaymentSnapshot) AddMonthlyPaymentMonthlyPaymentItemSnapshots(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MonthlyPaymentItemSnapshot) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MonthlyPaymentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"monthly_payment_item_snapshots\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"monthly_payment_id"}),
				strmangle.WhereClause("\"", "\"", 2, monthlyPaymentItemSnapshotPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MonthlyPaymentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &monthlyPaymentSnapshotR{
			MonthlyPaymentMonthlyPaymentItemSnapshots: related,
		}
	} else {
		o.R.MonthlyPaymentMonthlyPaymentItemSnapshots = append(o.R.MonthlyPaymentMonthlyPaymentItemSnapshots, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &monthlyPaymentItemSnapshotR{
				MonthlyPayment: o,
			}
		} else {
			rel.R.MonthlyPayment = o
		}
	}
	return nil
}

// MonthlyPaymentSnapshots retrieves all the records using an executor.
func MonthlyPaymentSnapshots(mods ...qm.QueryMod) monthlyPaymentSnapshotQuery {
	mods = append(mods, qm.From("\"monthly_payment_snapshots\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"monthly_payment_snapshots\".*"})
	}

	return monthlyPaymentSnapshotQuery{q}
}

// FindMonthlyPaymentSnapshotG retrieves a single record by ID.
func FindMonthlyPaymentSnapshotG(ctx context.Context, iD int, selectCols ...string) (*MonthlyPaymentSnapshot, error) {
	return FindMonthlyPaymentSnapshot(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindMonthlyPaymentSnapshot retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMonthlyPaymentSnapshot(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MonthlyPaymentSnapshot, error) {
	monthlyPaymentSnapshotObj := &MonthlyPaymentSnapshot{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"monthly_payment_snapshots\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, monthlyPaymentSnapshotObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from monthly_payment_snapshots")
	}

	if err = monthlyPaymentSnapshotObj.doAfterSelectHooks(ctx, exec); err != nil {
		return monthlyPaymentSnapshotObj, err
	}

	return monthlyPaymentSnapshotObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MonthlyPaymentSnapshot) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MonthlyPaymentSnapshot) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no monthly_payment_snapshots provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(monthlyPaymentSnapshotColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	monthlyPaymentSnapshotInsertCacheMut.RLock()
	cache, cached := monthlyPaymentSnapshotInsertCache[key]
	monthlyPaymentSnapshotInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			monthlyPaymentSnapshotAllColumns,
			monthlyPaymentSnapshotColumnsWithDefault,
			monthlyPaymentSnapshotColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(monthlyPaymentSnapshotType, monthlyPaymentSnapshotMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(monthlyPaymentSnapshotType, monthlyPaymentSnapshotMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"monthly_payment_snapshots\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"monthly_payment_snapshots\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into monthly_payment_snapshots")
	}

	if !cached {
		monthlyPaymentSnapshotInsertCacheMut.Lock()
		monthlyPaymentSnapshotInsertCache[key] = cache
		monthlyPaymentSnapshotInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single MonthlyPaymentSnapshot record using the global executor.
// See Update for more documentation.
func (o *MonthlyPaymentSnapshot) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the MonthlyPaymentSnapshot.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MonthlyPaymentSnapshot) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	monthlyPaymentSnapshotUpdateCacheMut.RLock()
	cache, cached := monthlyPaymentSnapshotUpdateCache[key]
	monthlyPaymentSnapshotUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			monthlyPaymentSnapshotAllColumns,
			monthlyPaymentSnapshotPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update monthly_payment_snapshots, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"monthly_payment_snapshots\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, monthlyPaymentSnapshotPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(monthlyPaymentSnapshotType, monthlyPaymentSnapshotMapping, append(wl, monthlyPaymentSnapshotPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update monthly_payment_snapshots row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for monthly_payment_snapshots")
	}

	if !cached {
		monthlyPaymentSnapshotUpdateCacheMut.Lock()
		monthlyPaymentSnapshotUpdateCache[key] = cache
		monthlyPaymentSnapshotUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q monthlyPaymentSnapshotQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q monthlyPaymentSnapshotQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for monthly_payment_snapshots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for monthly_payment_snapshots")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MonthlyPaymentSnapshotSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MonthlyPaymentSnapshotSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monthlyPaymentSnapshotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"monthly_payment_snapshots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, monthlyPaymentSnapshotPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in monthlyPaymentSnapshot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all monthlyPaymentSnapshot")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *MonthlyPaymentSnapshot) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MonthlyPaymentSnapshot) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no monthly_payment_snapshots provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(monthlyPaymentSnapshotColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	monthlyPaymentSnapshotUpsertCacheMut.RLock()
	cache, cached := monthlyPaymentSnapshotUpsertCache[key]
	monthlyPaymentSnapshotUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			monthlyPaymentSnapshotAllColumns,
			monthlyPaymentSnapshotColumnsWithDefault,
			monthlyPaymentSnapshotColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			monthlyPaymentSnapshotAllColumns,
			monthlyPaymentSnapshotPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert monthly_payment_snapshots, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(monthlyPaymentSnapshotPrimaryKeyColumns))
			copy(conflict, monthlyPaymentSnapshotPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"monthly_payment_snapshots\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(monthlyPaymentSnapshotType, monthlyPaymentSnapshotMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(monthlyPaymentSnapshotType, monthlyPaymentSnapshotMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert monthly_payment_snapshots")
	}

	if !cached {
		monthlyPaymentSnapshotUpsertCacheMut.Lock()
		monthlyPaymentSnapshotUpsertCache[key] = cache
		monthlyPaymentSnapshotUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single MonthlyPaymentSnapshot record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *MonthlyPaymentSnapshot) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single MonthlyPaymentSnapshot record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MonthlyPaymentSnapshot) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MonthlyPaymentSnapshot provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), monthlyPaymentSnapshotPrimaryKeyMapping)
	sql := "DELETE FROM \"monthly_payment_snapshots\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from monthly_payment_snapshots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for monthly_payment_snapshots")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q monthlyPaymentSnapshotQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q monthlyPaymentSnapshotQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no monthlyPaymentSnapshotQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from monthly_payment_snapshots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for monthly_payment_snapshots")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MonthlyPaymentSnapshotSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MonthlyPaymentSnapshotSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(monthlyPaymentSnapshotBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monthlyPaymentSnapshotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"monthly_payment_snapshots\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, monthlyPaymentSnapshotPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from monthlyPaymentSnapshot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for monthly_payment_snapshots")
	}

	if len(monthlyPaymentSnapshotAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *MonthlyPaymentSnapshot) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no MonthlyPaymentSnapshot provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MonthlyPaymentSnapshot) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMonthlyPaymentSnapshot(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MonthlyPaymentSnapshotSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty MonthlyPaymentSnapshotSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MonthlyPaymentSnapshotSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MonthlyPaymentSnapshotSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monthlyPaymentSnapshotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"monthly_payment_snapshots\".* FROM \"monthly_payment_snapshots\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, monthlyPaymentSnapshotPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MonthlyPaymentSnapshotSlice")
	}

	*o = slice

	return nil
}

// MonthlyPaymentSnapshotExistsG checks if the MonthlyPaymentSnapshot row exists.
func MonthlyPaymentSnapshotExistsG(ctx context.Context, iD int) (bool, error) {
	return MonthlyPaymentSnapshotExists(ctx, boil.GetContextDB(), iD)
}

// MonthlyPaymentSnapshotExists checks if the MonthlyPaymentSnapshot row exists.
func MonthlyPaymentSnapshotExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"monthly_payment_snapshots\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if monthly_payment_snapshots exists")
	}

	return exists, nil
}

// Exists checks if the MonthlyPaymentSnapshot row exists.
func (o *MonthlyPaymentSnapshot) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MonthlyPaymentSnapshotExists(ctx, exec, o.ID)
}
