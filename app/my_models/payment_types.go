// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PaymentType is an object representing the database table.
type PaymentType struct {
	Label string `boil:"label" json:"label" toml:"label" yaml:"label"`

	R *paymentTypeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L paymentTypeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PaymentTypeColumns = struct {
	Label string
}{
	Label: "label",
}

var PaymentTypeTableColumns = struct {
	Label string
}{
	Label: "payment_types.label",
}

// Generated where

var PaymentTypeWhere = struct {
	Label whereHelperstring
}{
	Label: whereHelperstring{field: "\"payment_types\".\"label\""},
}

// PaymentTypeRels is where relationship names are stored.
var PaymentTypeRels = struct {
	Payments string
}{
	Payments: "Payments",
}

// paymentTypeR is where relationships are stored.
type paymentTypeR struct {
	Payments PaymentSlice `boil:"Payments" json:"Payments" toml:"Payments" yaml:"Payments"`
}

// NewStruct creates a new relationship struct
func (*paymentTypeR) NewStruct() *paymentTypeR {
	return &paymentTypeR{}
}

func (r *paymentTypeR) GetPayments() PaymentSlice {
	if r == nil {
		return nil
	}
	return r.Payments
}

// paymentTypeL is where Load methods for each relationship are stored.
type paymentTypeL struct{}

var (
	paymentTypeAllColumns            = []string{"label"}
	paymentTypeColumnsWithoutDefault = []string{"label"}
	paymentTypeColumnsWithDefault    = []string{}
	paymentTypePrimaryKeyColumns     = []string{"label"}
	paymentTypeGeneratedColumns      = []string{}
)

type (
	// PaymentTypeSlice is an alias for a slice of pointers to PaymentType.
	// This should almost always be used instead of []PaymentType.
	PaymentTypeSlice []*PaymentType
	// PaymentTypeHook is the signature for custom PaymentType hook methods
	PaymentTypeHook func(context.Context, boil.ContextExecutor, *PaymentType) error

	paymentTypeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	paymentTypeType                 = reflect.TypeOf(&PaymentType{})
	paymentTypeMapping              = queries.MakeStructMapping(paymentTypeType)
	paymentTypePrimaryKeyMapping, _ = queries.BindMapping(paymentTypeType, paymentTypeMapping, paymentTypePrimaryKeyColumns)
	paymentTypeInsertCacheMut       sync.RWMutex
	paymentTypeInsertCache          = make(map[string]insertCache)
	paymentTypeUpdateCacheMut       sync.RWMutex
	paymentTypeUpdateCache          = make(map[string]updateCache)
	paymentTypeUpsertCacheMut       sync.RWMutex
	paymentTypeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var paymentTypeAfterSelectHooks []PaymentTypeHook

var paymentTypeBeforeInsertHooks []PaymentTypeHook
var paymentTypeAfterInsertHooks []PaymentTypeHook

var paymentTypeBeforeUpdateHooks []PaymentTypeHook
var paymentTypeAfterUpdateHooks []PaymentTypeHook

var paymentTypeBeforeDeleteHooks []PaymentTypeHook
var paymentTypeAfterDeleteHooks []PaymentTypeHook

var paymentTypeBeforeUpsertHooks []PaymentTypeHook
var paymentTypeAfterUpsertHooks []PaymentTypeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PaymentType) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentTypeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PaymentType) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentTypeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PaymentType) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentTypeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PaymentType) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentTypeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PaymentType) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentTypeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PaymentType) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentTypeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PaymentType) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentTypeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PaymentType) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentTypeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PaymentType) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range paymentTypeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPaymentTypeHook registers your hook function for all future operations.
func AddPaymentTypeHook(hookPoint boil.HookPoint, paymentTypeHook PaymentTypeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		paymentTypeAfterSelectHooks = append(paymentTypeAfterSelectHooks, paymentTypeHook)
	case boil.BeforeInsertHook:
		paymentTypeBeforeInsertHooks = append(paymentTypeBeforeInsertHooks, paymentTypeHook)
	case boil.AfterInsertHook:
		paymentTypeAfterInsertHooks = append(paymentTypeAfterInsertHooks, paymentTypeHook)
	case boil.BeforeUpdateHook:
		paymentTypeBeforeUpdateHooks = append(paymentTypeBeforeUpdateHooks, paymentTypeHook)
	case boil.AfterUpdateHook:
		paymentTypeAfterUpdateHooks = append(paymentTypeAfterUpdateHooks, paymentTypeHook)
	case boil.BeforeDeleteHook:
		paymentTypeBeforeDeleteHooks = append(paymentTypeBeforeDeleteHooks, paymentTypeHook)
	case boil.AfterDeleteHook:
		paymentTypeAfterDeleteHooks = append(paymentTypeAfterDeleteHooks, paymentTypeHook)
	case boil.BeforeUpsertHook:
		paymentTypeBeforeUpsertHooks = append(paymentTypeBeforeUpsertHooks, paymentTypeHook)
	case boil.AfterUpsertHook:
		paymentTypeAfterUpsertHooks = append(paymentTypeAfterUpsertHooks, paymentTypeHook)
	}
}

// OneG returns a single paymentType record from the query using the global executor.
func (q paymentTypeQuery) OneG(ctx context.Context) (*PaymentType, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single paymentType record from the query.
func (q paymentTypeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*PaymentType, error) {
	o := &PaymentType{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for payment_types")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all PaymentType records from the query using the global executor.
func (q paymentTypeQuery) AllG(ctx context.Context) (PaymentTypeSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all PaymentType records from the query.
func (q paymentTypeQuery) All(ctx context.Context, exec boil.ContextExecutor) (PaymentTypeSlice, error) {
	var o []*PaymentType

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to PaymentType slice")
	}

	if len(paymentTypeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all PaymentType records in the query using the global executor
func (q paymentTypeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all PaymentType records in the query.
func (q paymentTypeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count payment_types rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q paymentTypeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q paymentTypeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if payment_types exists")
	}

	return count > 0, nil
}

// Payments retrieves all the payment's Payments with an executor.
func (o *PaymentType) Payments(mods ...qm.QueryMod) paymentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"payments\".\"payment_type\"=?", o.Label),
	)

	return Payments(queryMods...)
}

// LoadPayments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (paymentTypeL) LoadPayments(ctx context.Context, e boil.ContextExecutor, singular bool, maybePaymentType interface{}, mods queries.Applicator) error {
	var slice []*PaymentType
	var object *PaymentType

	if singular {
		var ok bool
		object, ok = maybePaymentType.(*PaymentType)
		if !ok {
			object = new(PaymentType)
			ok = queries.SetFromEmbeddedStruct(&object, &maybePaymentType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybePaymentType))
			}
		}
	} else {
		s, ok := maybePaymentType.(*[]*PaymentType)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybePaymentType)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybePaymentType))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &paymentTypeR{}
		}
		args = append(args, object.Label)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &paymentTypeR{}
			}

			for _, a := range args {
				if a == obj.Label {
					continue Outer
				}
			}

			args = append(args, obj.Label)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`payments`),
		qm.WhereIn(`payments.payment_type in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load payments")
	}

	var resultSlice []*Payment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice payments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on payments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payments")
	}

	if len(paymentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Payments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &paymentR{}
			}
			foreign.R.PaymentPaymentType = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Label == foreign.PaymentType {
				local.R.Payments = append(local.R.Payments, foreign)
				if foreign.R == nil {
					foreign.R = &paymentR{}
				}
				foreign.R.PaymentPaymentType = local
				break
			}
		}
	}

	return nil
}

// AddPaymentsG adds the given related objects to the existing relationships
// of the payment_type, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.PaymentPaymentType appropriately.
// Uses the global database handle.
func (o *PaymentType) AddPaymentsG(ctx context.Context, insert bool, related ...*Payment) error {
	return o.AddPayments(ctx, boil.GetContextDB(), insert, related...)
}

// AddPayments adds the given related objects to the existing relationships
// of the payment_type, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.PaymentPaymentType appropriately.
func (o *PaymentType) AddPayments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Payment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.PaymentType = o.Label
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"payments\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"payment_type"}),
				strmangle.WhereClause("\"", "\"", 2, paymentPrimaryKeyColumns),
			)
			values := []interface{}{o.Label, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.PaymentType = o.Label
		}
	}

	if o.R == nil {
		o.R = &paymentTypeR{
			Payments: related,
		}
	} else {
		o.R.Payments = append(o.R.Payments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentR{
				PaymentPaymentType: o,
			}
		} else {
			rel.R.PaymentPaymentType = o
		}
	}
	return nil
}

// PaymentTypes retrieves all the records using an executor.
func PaymentTypes(mods ...qm.QueryMod) paymentTypeQuery {
	mods = append(mods, qm.From("\"payment_types\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"payment_types\".*"})
	}

	return paymentTypeQuery{q}
}

// FindPaymentTypeG retrieves a single record by ID.
func FindPaymentTypeG(ctx context.Context, label string, selectCols ...string) (*PaymentType, error) {
	return FindPaymentType(ctx, boil.GetContextDB(), label, selectCols...)
}

// FindPaymentType retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPaymentType(ctx context.Context, exec boil.ContextExecutor, label string, selectCols ...string) (*PaymentType, error) {
	paymentTypeObj := &PaymentType{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"payment_types\" where \"label\"=$1", sel,
	)

	q := queries.Raw(query, label)

	err := q.Bind(ctx, exec, paymentTypeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from payment_types")
	}

	if err = paymentTypeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return paymentTypeObj, err
	}

	return paymentTypeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *PaymentType) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PaymentType) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no payment_types provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentTypeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	paymentTypeInsertCacheMut.RLock()
	cache, cached := paymentTypeInsertCache[key]
	paymentTypeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			paymentTypeAllColumns,
			paymentTypeColumnsWithDefault,
			paymentTypeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(paymentTypeType, paymentTypeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(paymentTypeType, paymentTypeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"payment_types\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"payment_types\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into payment_types")
	}

	if !cached {
		paymentTypeInsertCacheMut.Lock()
		paymentTypeInsertCache[key] = cache
		paymentTypeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single PaymentType record using the global executor.
// See Update for more documentation.
func (o *PaymentType) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the PaymentType.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PaymentType) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	paymentTypeUpdateCacheMut.RLock()
	cache, cached := paymentTypeUpdateCache[key]
	paymentTypeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			paymentTypeAllColumns,
			paymentTypePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update payment_types, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"payment_types\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, paymentTypePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(paymentTypeType, paymentTypeMapping, append(wl, paymentTypePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update payment_types row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for payment_types")
	}

	if !cached {
		paymentTypeUpdateCacheMut.Lock()
		paymentTypeUpdateCache[key] = cache
		paymentTypeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q paymentTypeQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q paymentTypeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for payment_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for payment_types")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PaymentTypeSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PaymentTypeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"payment_types\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, paymentTypePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in paymentType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all paymentType")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *PaymentType) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PaymentType) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no payment_types provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(paymentTypeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	paymentTypeUpsertCacheMut.RLock()
	cache, cached := paymentTypeUpsertCache[key]
	paymentTypeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			paymentTypeAllColumns,
			paymentTypeColumnsWithDefault,
			paymentTypeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			paymentTypeAllColumns,
			paymentTypePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert payment_types, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(paymentTypePrimaryKeyColumns))
			copy(conflict, paymentTypePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"payment_types\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(paymentTypeType, paymentTypeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(paymentTypeType, paymentTypeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert payment_types")
	}

	if !cached {
		paymentTypeUpsertCacheMut.Lock()
		paymentTypeUpsertCache[key] = cache
		paymentTypeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single PaymentType record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *PaymentType) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single PaymentType record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PaymentType) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no PaymentType provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), paymentTypePrimaryKeyMapping)
	sql := "DELETE FROM \"payment_types\" WHERE \"label\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from payment_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for payment_types")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q paymentTypeQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q paymentTypeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no paymentTypeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from payment_types")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for payment_types")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o PaymentTypeSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PaymentTypeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(paymentTypeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"payment_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, paymentTypePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from paymentType slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for payment_types")
	}

	if len(paymentTypeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *PaymentType) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no PaymentType provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PaymentType) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindPaymentType(ctx, exec, o.Label)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PaymentTypeSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty PaymentTypeSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PaymentTypeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PaymentTypeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), paymentTypePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"payment_types\".* FROM \"payment_types\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, paymentTypePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in PaymentTypeSlice")
	}

	*o = slice

	return nil
}

// PaymentTypeExistsG checks if the PaymentType row exists.
func PaymentTypeExistsG(ctx context.Context, label string) (bool, error) {
	return PaymentTypeExists(ctx, boil.GetContextDB(), label)
}

// PaymentTypeExists checks if the PaymentType row exists.
func PaymentTypeExists(ctx context.Context, exec boil.ContextExecutor, label string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"payment_types\" where \"label\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, label)
	}
	row := exec.QueryRowContext(ctx, sql, label)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if payment_types exists")
	}

	return exists, nil
}

// Exists checks if the PaymentType row exists.
func (o *PaymentType) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return PaymentTypeExists(ctx, exec, o.Label)
}
