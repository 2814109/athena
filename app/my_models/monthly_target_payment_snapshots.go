// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// MonthlyTargetPaymentSnapshot is an object representing the database table.
type MonthlyTargetPaymentSnapshot struct {
	ID            int               `boil:"id" json:"id" toml:"id" yaml:"id"`
	MonthlyAmount types.NullDecimal `boil:"monthly_amount" json:"monthly_amount,omitempty" toml:"monthly_amount" yaml:"monthly_amount,omitempty"`
	Month         time.Time         `boil:"month" json:"month" toml:"month" yaml:"month"`
	UserID        int               `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`

	R *monthlyTargetPaymentSnapshotR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L monthlyTargetPaymentSnapshotL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MonthlyTargetPaymentSnapshotColumns = struct {
	ID            string
	MonthlyAmount string
	Month         string
	UserID        string
}{
	ID:            "id",
	MonthlyAmount: "monthly_amount",
	Month:         "month",
	UserID:        "user_id",
}

var MonthlyTargetPaymentSnapshotTableColumns = struct {
	ID            string
	MonthlyAmount string
	Month         string
	UserID        string
}{
	ID:            "monthly_target_payment_snapshots.id",
	MonthlyAmount: "monthly_target_payment_snapshots.monthly_amount",
	Month:         "monthly_target_payment_snapshots.month",
	UserID:        "monthly_target_payment_snapshots.user_id",
}

// Generated where

var MonthlyTargetPaymentSnapshotWhere = struct {
	ID            whereHelperint
	MonthlyAmount whereHelpertypes_NullDecimal
	Month         whereHelpertime_Time
	UserID        whereHelperint
}{
	ID:            whereHelperint{field: "\"monthly_target_payment_snapshots\".\"id\""},
	MonthlyAmount: whereHelpertypes_NullDecimal{field: "\"monthly_target_payment_snapshots\".\"monthly_amount\""},
	Month:         whereHelpertime_Time{field: "\"monthly_target_payment_snapshots\".\"month\""},
	UserID:        whereHelperint{field: "\"monthly_target_payment_snapshots\".\"user_id\""},
}

// MonthlyTargetPaymentSnapshotRels is where relationship names are stored.
var MonthlyTargetPaymentSnapshotRels = struct {
	User string
}{
	User: "User",
}

// monthlyTargetPaymentSnapshotR is where relationships are stored.
type monthlyTargetPaymentSnapshotR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*monthlyTargetPaymentSnapshotR) NewStruct() *monthlyTargetPaymentSnapshotR {
	return &monthlyTargetPaymentSnapshotR{}
}

func (r *monthlyTargetPaymentSnapshotR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// monthlyTargetPaymentSnapshotL is where Load methods for each relationship are stored.
type monthlyTargetPaymentSnapshotL struct{}

var (
	monthlyTargetPaymentSnapshotAllColumns            = []string{"id", "monthly_amount", "month", "user_id"}
	monthlyTargetPaymentSnapshotColumnsWithoutDefault = []string{"month"}
	monthlyTargetPaymentSnapshotColumnsWithDefault    = []string{"id", "monthly_amount", "user_id"}
	monthlyTargetPaymentSnapshotPrimaryKeyColumns     = []string{"id"}
	monthlyTargetPaymentSnapshotGeneratedColumns      = []string{}
)

type (
	// MonthlyTargetPaymentSnapshotSlice is an alias for a slice of pointers to MonthlyTargetPaymentSnapshot.
	// This should almost always be used instead of []MonthlyTargetPaymentSnapshot.
	MonthlyTargetPaymentSnapshotSlice []*MonthlyTargetPaymentSnapshot
	// MonthlyTargetPaymentSnapshotHook is the signature for custom MonthlyTargetPaymentSnapshot hook methods
	MonthlyTargetPaymentSnapshotHook func(context.Context, boil.ContextExecutor, *MonthlyTargetPaymentSnapshot) error

	monthlyTargetPaymentSnapshotQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	monthlyTargetPaymentSnapshotType                 = reflect.TypeOf(&MonthlyTargetPaymentSnapshot{})
	monthlyTargetPaymentSnapshotMapping              = queries.MakeStructMapping(monthlyTargetPaymentSnapshotType)
	monthlyTargetPaymentSnapshotPrimaryKeyMapping, _ = queries.BindMapping(monthlyTargetPaymentSnapshotType, monthlyTargetPaymentSnapshotMapping, monthlyTargetPaymentSnapshotPrimaryKeyColumns)
	monthlyTargetPaymentSnapshotInsertCacheMut       sync.RWMutex
	monthlyTargetPaymentSnapshotInsertCache          = make(map[string]insertCache)
	monthlyTargetPaymentSnapshotUpdateCacheMut       sync.RWMutex
	monthlyTargetPaymentSnapshotUpdateCache          = make(map[string]updateCache)
	monthlyTargetPaymentSnapshotUpsertCacheMut       sync.RWMutex
	monthlyTargetPaymentSnapshotUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var monthlyTargetPaymentSnapshotAfterSelectHooks []MonthlyTargetPaymentSnapshotHook

var monthlyTargetPaymentSnapshotBeforeInsertHooks []MonthlyTargetPaymentSnapshotHook
var monthlyTargetPaymentSnapshotAfterInsertHooks []MonthlyTargetPaymentSnapshotHook

var monthlyTargetPaymentSnapshotBeforeUpdateHooks []MonthlyTargetPaymentSnapshotHook
var monthlyTargetPaymentSnapshotAfterUpdateHooks []MonthlyTargetPaymentSnapshotHook

var monthlyTargetPaymentSnapshotBeforeDeleteHooks []MonthlyTargetPaymentSnapshotHook
var monthlyTargetPaymentSnapshotAfterDeleteHooks []MonthlyTargetPaymentSnapshotHook

var monthlyTargetPaymentSnapshotBeforeUpsertHooks []MonthlyTargetPaymentSnapshotHook
var monthlyTargetPaymentSnapshotAfterUpsertHooks []MonthlyTargetPaymentSnapshotHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MonthlyTargetPaymentSnapshot) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyTargetPaymentSnapshotAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MonthlyTargetPaymentSnapshot) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyTargetPaymentSnapshotBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MonthlyTargetPaymentSnapshot) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyTargetPaymentSnapshotAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MonthlyTargetPaymentSnapshot) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyTargetPaymentSnapshotBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MonthlyTargetPaymentSnapshot) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyTargetPaymentSnapshotAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MonthlyTargetPaymentSnapshot) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyTargetPaymentSnapshotBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MonthlyTargetPaymentSnapshot) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyTargetPaymentSnapshotAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MonthlyTargetPaymentSnapshot) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyTargetPaymentSnapshotBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MonthlyTargetPaymentSnapshot) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monthlyTargetPaymentSnapshotAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMonthlyTargetPaymentSnapshotHook registers your hook function for all future operations.
func AddMonthlyTargetPaymentSnapshotHook(hookPoint boil.HookPoint, monthlyTargetPaymentSnapshotHook MonthlyTargetPaymentSnapshotHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		monthlyTargetPaymentSnapshotAfterSelectHooks = append(monthlyTargetPaymentSnapshotAfterSelectHooks, monthlyTargetPaymentSnapshotHook)
	case boil.BeforeInsertHook:
		monthlyTargetPaymentSnapshotBeforeInsertHooks = append(monthlyTargetPaymentSnapshotBeforeInsertHooks, monthlyTargetPaymentSnapshotHook)
	case boil.AfterInsertHook:
		monthlyTargetPaymentSnapshotAfterInsertHooks = append(monthlyTargetPaymentSnapshotAfterInsertHooks, monthlyTargetPaymentSnapshotHook)
	case boil.BeforeUpdateHook:
		monthlyTargetPaymentSnapshotBeforeUpdateHooks = append(monthlyTargetPaymentSnapshotBeforeUpdateHooks, monthlyTargetPaymentSnapshotHook)
	case boil.AfterUpdateHook:
		monthlyTargetPaymentSnapshotAfterUpdateHooks = append(monthlyTargetPaymentSnapshotAfterUpdateHooks, monthlyTargetPaymentSnapshotHook)
	case boil.BeforeDeleteHook:
		monthlyTargetPaymentSnapshotBeforeDeleteHooks = append(monthlyTargetPaymentSnapshotBeforeDeleteHooks, monthlyTargetPaymentSnapshotHook)
	case boil.AfterDeleteHook:
		monthlyTargetPaymentSnapshotAfterDeleteHooks = append(monthlyTargetPaymentSnapshotAfterDeleteHooks, monthlyTargetPaymentSnapshotHook)
	case boil.BeforeUpsertHook:
		monthlyTargetPaymentSnapshotBeforeUpsertHooks = append(monthlyTargetPaymentSnapshotBeforeUpsertHooks, monthlyTargetPaymentSnapshotHook)
	case boil.AfterUpsertHook:
		monthlyTargetPaymentSnapshotAfterUpsertHooks = append(monthlyTargetPaymentSnapshotAfterUpsertHooks, monthlyTargetPaymentSnapshotHook)
	}
}

// One returns a single monthlyTargetPaymentSnapshot record from the query.
func (q monthlyTargetPaymentSnapshotQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MonthlyTargetPaymentSnapshot, error) {
	o := &MonthlyTargetPaymentSnapshot{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for monthly_target_payment_snapshots")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MonthlyTargetPaymentSnapshot records from the query.
func (q monthlyTargetPaymentSnapshotQuery) All(ctx context.Context, exec boil.ContextExecutor) (MonthlyTargetPaymentSnapshotSlice, error) {
	var o []*MonthlyTargetPaymentSnapshot

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MonthlyTargetPaymentSnapshot slice")
	}

	if len(monthlyTargetPaymentSnapshotAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MonthlyTargetPaymentSnapshot records in the query.
func (q monthlyTargetPaymentSnapshotQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count monthly_target_payment_snapshots rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q monthlyTargetPaymentSnapshotQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if monthly_target_payment_snapshots exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *MonthlyTargetPaymentSnapshot) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (monthlyTargetPaymentSnapshotL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMonthlyTargetPaymentSnapshot interface{}, mods queries.Applicator) error {
	var slice []*MonthlyTargetPaymentSnapshot
	var object *MonthlyTargetPaymentSnapshot

	if singular {
		var ok bool
		object, ok = maybeMonthlyTargetPaymentSnapshot.(*MonthlyTargetPaymentSnapshot)
		if !ok {
			object = new(MonthlyTargetPaymentSnapshot)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMonthlyTargetPaymentSnapshot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMonthlyTargetPaymentSnapshot))
			}
		}
	} else {
		s, ok := maybeMonthlyTargetPaymentSnapshot.(*[]*MonthlyTargetPaymentSnapshot)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMonthlyTargetPaymentSnapshot)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMonthlyTargetPaymentSnapshot))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &monthlyTargetPaymentSnapshotR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &monthlyTargetPaymentSnapshotR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.MonthlyTargetPaymentSnapshots = append(foreign.R.MonthlyTargetPaymentSnapshots, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.MonthlyTargetPaymentSnapshots = append(foreign.R.MonthlyTargetPaymentSnapshots, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the monthlyTargetPaymentSnapshot to the related item.
// Sets o.R.User to related.
// Adds o to related.R.MonthlyTargetPaymentSnapshots.
func (o *MonthlyTargetPaymentSnapshot) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"monthly_target_payment_snapshots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, monthlyTargetPaymentSnapshotPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &monthlyTargetPaymentSnapshotR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			MonthlyTargetPaymentSnapshots: MonthlyTargetPaymentSnapshotSlice{o},
		}
	} else {
		related.R.MonthlyTargetPaymentSnapshots = append(related.R.MonthlyTargetPaymentSnapshots, o)
	}

	return nil
}

// MonthlyTargetPaymentSnapshots retrieves all the records using an executor.
func MonthlyTargetPaymentSnapshots(mods ...qm.QueryMod) monthlyTargetPaymentSnapshotQuery {
	mods = append(mods, qm.From("\"monthly_target_payment_snapshots\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"monthly_target_payment_snapshots\".*"})
	}

	return monthlyTargetPaymentSnapshotQuery{q}
}

// FindMonthlyTargetPaymentSnapshot retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMonthlyTargetPaymentSnapshot(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MonthlyTargetPaymentSnapshot, error) {
	monthlyTargetPaymentSnapshotObj := &MonthlyTargetPaymentSnapshot{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"monthly_target_payment_snapshots\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, monthlyTargetPaymentSnapshotObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from monthly_target_payment_snapshots")
	}

	if err = monthlyTargetPaymentSnapshotObj.doAfterSelectHooks(ctx, exec); err != nil {
		return monthlyTargetPaymentSnapshotObj, err
	}

	return monthlyTargetPaymentSnapshotObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MonthlyTargetPaymentSnapshot) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no monthly_target_payment_snapshots provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(monthlyTargetPaymentSnapshotColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	monthlyTargetPaymentSnapshotInsertCacheMut.RLock()
	cache, cached := monthlyTargetPaymentSnapshotInsertCache[key]
	monthlyTargetPaymentSnapshotInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			monthlyTargetPaymentSnapshotAllColumns,
			monthlyTargetPaymentSnapshotColumnsWithDefault,
			monthlyTargetPaymentSnapshotColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(monthlyTargetPaymentSnapshotType, monthlyTargetPaymentSnapshotMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(monthlyTargetPaymentSnapshotType, monthlyTargetPaymentSnapshotMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"monthly_target_payment_snapshots\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"monthly_target_payment_snapshots\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into monthly_target_payment_snapshots")
	}

	if !cached {
		monthlyTargetPaymentSnapshotInsertCacheMut.Lock()
		monthlyTargetPaymentSnapshotInsertCache[key] = cache
		monthlyTargetPaymentSnapshotInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MonthlyTargetPaymentSnapshot.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MonthlyTargetPaymentSnapshot) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	monthlyTargetPaymentSnapshotUpdateCacheMut.RLock()
	cache, cached := monthlyTargetPaymentSnapshotUpdateCache[key]
	monthlyTargetPaymentSnapshotUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			monthlyTargetPaymentSnapshotAllColumns,
			monthlyTargetPaymentSnapshotPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update monthly_target_payment_snapshots, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"monthly_target_payment_snapshots\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, monthlyTargetPaymentSnapshotPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(monthlyTargetPaymentSnapshotType, monthlyTargetPaymentSnapshotMapping, append(wl, monthlyTargetPaymentSnapshotPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update monthly_target_payment_snapshots row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for monthly_target_payment_snapshots")
	}

	if !cached {
		monthlyTargetPaymentSnapshotUpdateCacheMut.Lock()
		monthlyTargetPaymentSnapshotUpdateCache[key] = cache
		monthlyTargetPaymentSnapshotUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q monthlyTargetPaymentSnapshotQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for monthly_target_payment_snapshots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for monthly_target_payment_snapshots")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MonthlyTargetPaymentSnapshotSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monthlyTargetPaymentSnapshotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"monthly_target_payment_snapshots\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, monthlyTargetPaymentSnapshotPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in monthlyTargetPaymentSnapshot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all monthlyTargetPaymentSnapshot")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MonthlyTargetPaymentSnapshot) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no monthly_target_payment_snapshots provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(monthlyTargetPaymentSnapshotColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	monthlyTargetPaymentSnapshotUpsertCacheMut.RLock()
	cache, cached := monthlyTargetPaymentSnapshotUpsertCache[key]
	monthlyTargetPaymentSnapshotUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			monthlyTargetPaymentSnapshotAllColumns,
			monthlyTargetPaymentSnapshotColumnsWithDefault,
			monthlyTargetPaymentSnapshotColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			monthlyTargetPaymentSnapshotAllColumns,
			monthlyTargetPaymentSnapshotPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert monthly_target_payment_snapshots, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(monthlyTargetPaymentSnapshotPrimaryKeyColumns))
			copy(conflict, monthlyTargetPaymentSnapshotPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"monthly_target_payment_snapshots\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(monthlyTargetPaymentSnapshotType, monthlyTargetPaymentSnapshotMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(monthlyTargetPaymentSnapshotType, monthlyTargetPaymentSnapshotMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert monthly_target_payment_snapshots")
	}

	if !cached {
		monthlyTargetPaymentSnapshotUpsertCacheMut.Lock()
		monthlyTargetPaymentSnapshotUpsertCache[key] = cache
		monthlyTargetPaymentSnapshotUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MonthlyTargetPaymentSnapshot record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MonthlyTargetPaymentSnapshot) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MonthlyTargetPaymentSnapshot provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), monthlyTargetPaymentSnapshotPrimaryKeyMapping)
	sql := "DELETE FROM \"monthly_target_payment_snapshots\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from monthly_target_payment_snapshots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for monthly_target_payment_snapshots")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q monthlyTargetPaymentSnapshotQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no monthlyTargetPaymentSnapshotQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from monthly_target_payment_snapshots")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for monthly_target_payment_snapshots")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MonthlyTargetPaymentSnapshotSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(monthlyTargetPaymentSnapshotBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monthlyTargetPaymentSnapshotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"monthly_target_payment_snapshots\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, monthlyTargetPaymentSnapshotPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from monthlyTargetPaymentSnapshot slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for monthly_target_payment_snapshots")
	}

	if len(monthlyTargetPaymentSnapshotAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MonthlyTargetPaymentSnapshot) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMonthlyTargetPaymentSnapshot(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MonthlyTargetPaymentSnapshotSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MonthlyTargetPaymentSnapshotSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monthlyTargetPaymentSnapshotPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"monthly_target_payment_snapshots\".* FROM \"monthly_target_payment_snapshots\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, monthlyTargetPaymentSnapshotPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MonthlyTargetPaymentSnapshotSlice")
	}

	*o = slice

	return nil
}

// MonthlyTargetPaymentSnapshotExists checks if the MonthlyTargetPaymentSnapshot row exists.
func MonthlyTargetPaymentSnapshotExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"monthly_target_payment_snapshots\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if monthly_target_payment_snapshots exists")
	}

	return exists, nil
}

// Exists checks if the MonthlyTargetPaymentSnapshot row exists.
func (o *MonthlyTargetPaymentSnapshot) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MonthlyTargetPaymentSnapshotExists(ctx, exec, o.ID)
}
